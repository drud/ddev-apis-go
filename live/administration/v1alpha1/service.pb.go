// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.22.0
// 	protoc        v3.11.0
// source: live/administration/v1alpha1/service.proto

package v1alpha1

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

var File_live_administration_v1alpha1_service_proto protoreflect.FileDescriptor

var file_live_administration_v1alpha1_service_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x6c, 0x69, 0x76, 0x65, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1c, 0x64, 0x64,
	0x65, 0x76, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a, 0x27, 0x6c, 0x69, 0x76, 0x65,
	0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x6c, 0x69, 0x76, 0x65, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x34, 0x6c, 0x69, 0x76, 0x65, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x34, 0x6c, 0x69, 0x76, 0x65, 0x2f, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0x9f, 0x28,
	0x0a, 0x0e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x74, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x30, 0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x31, 0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x72, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x2f, 0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x77, 0x0a, 0x0c, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x31, 0x2e, 0x64, 0x64, 0x65,
	0x76, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e,
	0x64, 0x64, 0x65, 0x76, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x6e, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x73,
	0x12, 0x2e, 0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2f, 0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x80, 0x01, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x43, 0x61, 0x70, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x34, 0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e,
	0x64, 0x64, 0x65, 0x76, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x65, 0x74,
	0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x83, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x35, 0x2e, 0x64, 0x64,
	0x65, 0x76, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x36, 0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7b, 0x0a, 0x0e,
	0x4c, 0x69, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x32,
	0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x33, 0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x86, 0x01, 0x0a, 0x11, 0x41, 0x64,
	0x64, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12,
	0x36, 0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41,
	0x64, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x92, 0x01, 0x0a, 0x15, 0x41, 0x64, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x12, 0x3a, 0x2e, 0x64,
	0x64, 0x65, 0x76, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x57,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8f, 0x01, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x12, 0x39, 0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x64, 0x64,
	0x65, 0x76, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x9b, 0x01, 0x0a, 0x18, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x44, 0x65, 0x76,
	0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x12, 0x3d, 0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8c, 0x01, 0x0a, 0x13, 0x53, 0x65, 0x74, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12,
	0x38, 0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53,
	0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x64, 0x64, 0x65, 0x76,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8c, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x38,
	0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x77, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x31, 0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7e,
	0x0a, 0x11, 0x49, 0x73, 0x41, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x56, 0x69, 0x65,
	0x77, 0x65, 0x72, 0x12, 0x32, 0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7e,
	0x0a, 0x11, 0x49, 0x73, 0x41, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x64, 0x69,
	0x74, 0x6f, 0x72, 0x12, 0x32, 0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7c,
	0x0a, 0x0f, 0x49, 0x73, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x56, 0x69, 0x65, 0x77, 0x65,
	0x72, 0x12, 0x32, 0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7c, 0x0a, 0x0f,
	0x49, 0x73, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x12,
	0x32, 0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7d, 0x0a, 0x10, 0x49, 0x73,
	0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x32,
	0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x33, 0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7e, 0x0a, 0x11, 0x49, 0x73, 0x57,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x56, 0x69, 0x65, 0x77, 0x65, 0x72, 0x12, 0x32,
	0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x33, 0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x79, 0x0a, 0x0c, 0x49, 0x73, 0x53,
	0x69, 0x74, 0x65, 0x45, 0x64, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x32, 0x2e, 0x64, 0x64, 0x65, 0x76,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e,
	0x64, 0x64, 0x65, 0x76, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x79, 0x0a, 0x0c, 0x49, 0x73, 0x53, 0x69, 0x74, 0x65, 0x56, 0x69,
	0x65, 0x77, 0x65, 0x72, 0x12, 0x32, 0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x79, 0x0a, 0x0c, 0x49, 0x73, 0x4c, 0x6f, 0x67, 0x73, 0x56, 0x69, 0x65, 0x77, 0x65, 0x72, 0x12,
	0x32, 0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7b, 0x0a, 0x0e, 0x49, 0x73,
	0x53, 0x69, 0x74, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x12, 0x32, 0x2e, 0x64,
	0x64, 0x65, 0x76, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x33, 0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7c, 0x0a, 0x0f, 0x49, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x32, 0x2e, 0x64, 0x64, 0x65,
	0x76, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33,
	0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7d, 0x0a, 0x10, 0x49, 0x73, 0x44, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x56, 0x69, 0x65, 0x77, 0x65, 0x72, 0x12, 0x32, 0x2e, 0x64, 0x64, 0x65, 0x76,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e,
	0x64, 0x64, 0x65, 0x76, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x78, 0x0a, 0x0b, 0x49, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x12, 0x32, 0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x79,
	0x0a, 0x0c, 0x49, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x69, 0x65, 0x77, 0x65, 0x72, 0x12, 0x32,
	0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x33, 0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x98, 0x01, 0x0a, 0x17, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x49,
	0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x98, 0x01, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x3c, 0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x49, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d,
	0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x98, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x2e, 0x64, 0x64,
	0x65, 0x76, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x64, 0x64, 0x65, 0x76,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x95, 0x01, 0x0a, 0x16, 0x4c,
	0x69, 0x73, 0x74, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x3b, 0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x52,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x52, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x98, 0x01, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x69, 0x74,
	0x6c, 0x61, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c,
	0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x64,
	0x64, 0x65, 0x76, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x98, 0x01,
	0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x49, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x2e, 0x64, 0x64, 0x65, 0x76,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47,
	0x69, 0x74, 0x6c, 0x61, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x69, 0x74,
	0x6c, 0x61, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x95, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73,
	0x74, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x3b, 0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x49, 0x6e, 0x74,
	0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x3c, 0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x89, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x37, 0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x69, 0x74, 0x6c, 0x61,
	0x62, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x38, 0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x9b, 0x01, 0x0a,
	0x18, 0x47, 0x65, 0x74, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3d, 0x2e, 0x64, 0x64, 0x65, 0x76,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x69, 0x74, 0x6c,
	0x61, 0x62, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x69, 0x74, 0x6c, 0x61,
	0x62, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x92, 0x01, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x3a, 0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x3b, 0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42,
	0x72, 0x0a, 0x25, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e, 0x6c, 0x69, 0x76, 0x65,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x42, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x72, 0x75, 0x64, 0x2f, 0x64, 0x64, 0x65, 0x76, 0x2d, 0x61,
	0x70, 0x69, 0x73, 0x2d, 0x67, 0x6f, 0x2f, 0x6c, 0x69, 0x76, 0x65, 0x2f, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_live_administration_v1alpha1_service_proto_goTypes = []interface{}{
	(*CreateTokenRequest)(nil),               // 0: ddev.administration.v1alpha1.CreateTokenRequest
	(*CreateRoleRequest)(nil),                // 1: ddev.administration.v1alpha1.CreateRoleRequest
	(*DescribeRoleRequest)(nil),              // 2: ddev.administration.v1alpha1.DescribeRoleRequest
	(*ListRolesRequest)(nil),                 // 3: ddev.administration.v1alpha1.ListRolesRequest
	(*SetCapabilitiesRequest)(nil),           // 4: ddev.administration.v1alpha1.SetCapabilitiesRequest
	(*ListCapabilitiesRequest)(nil),          // 5: ddev.administration.v1alpha1.ListCapabilitiesRequest
	(*ListWorkspaceRequest)(nil),             // 6: ddev.administration.v1alpha1.ListWorkspaceRequest
	(*AddWorkspaceAdminRequest)(nil),         // 7: ddev.administration.v1alpha1.AddWorkspaceAdminRequest
	(*AddWorkspaceDeveloperRequest)(nil),     // 8: ddev.administration.v1alpha1.AddWorkspaceDeveloperRequest
	(*DeleteWorkspaceAdminRequest)(nil),      // 9: ddev.administration.v1alpha1.DeleteWorkspaceAdminRequest
	(*DeleteWorkspaceDeveloperRequest)(nil),  // 10: ddev.administration.v1alpha1.DeleteWorkspaceDeveloperRequest
	(*SetDefaultWorkspaceRequest)(nil),       // 11: ddev.administration.v1alpha1.SetDefaultWorkspaceRequest
	(*GetDefaultWorkspaceRequest)(nil),       // 12: ddev.administration.v1alpha1.GetDefaultWorkspaceRequest
	(*GetWorkspaceRequest)(nil),              // 13: ddev.administration.v1alpha1.GetWorkspaceRequest
	(*AuthorizationRequest)(nil),             // 14: ddev.administration.v1alpha1.AuthorizationRequest
	(*CreateGithubIntegrationRequest)(nil),   // 15: ddev.administration.v1alpha1.CreateGithubIntegrationRequest
	(*DeleteGithubIntegrationRequest)(nil),   // 16: ddev.administration.v1alpha1.DeleteGithubIntegrationRequest
	(*UpdateGithubIntegrationRequest)(nil),   // 17: ddev.administration.v1alpha1.UpdateGithubIntegrationRequest
	(*ListGithubRepositoriesRequest)(nil),    // 18: ddev.administration.v1alpha1.ListGithubRepositoriesRequest
	(*CreateGitlabIntegrationRequest)(nil),   // 19: ddev.administration.v1alpha1.CreateGitlabIntegrationRequest
	(*DeleteGitlabIntegrationRequest)(nil),   // 20: ddev.administration.v1alpha1.DeleteGitlabIntegrationRequest
	(*ListGitlabIntegrationsRequest)(nil),    // 21: ddev.administration.v1alpha1.ListGitlabIntegrationsRequest
	(*ListGitlabProjectsRequest)(nil),        // 22: ddev.administration.v1alpha1.ListGitlabProjectsRequest
	(*GetGitlabProjectMetadataRequest)(nil),  // 23: ddev.administration.v1alpha1.GetGitlabProjectMetadataRequest
	(*GetRepositoryMetadataRequest)(nil),     // 24: ddev.administration.v1alpha1.GetRepositoryMetadataRequest
	(*CreateTokenResponse)(nil),              // 25: ddev.administration.v1alpha1.CreateTokenResponse
	(*CreateRoleResponse)(nil),               // 26: ddev.administration.v1alpha1.CreateRoleResponse
	(*DescribeRoleResponse)(nil),             // 27: ddev.administration.v1alpha1.DescribeRoleResponse
	(*ListRolesResponse)(nil),                // 28: ddev.administration.v1alpha1.ListRolesResponse
	(*SetCapabilitiesResponse)(nil),          // 29: ddev.administration.v1alpha1.SetCapabilitiesResponse
	(*ListCapabilitiesResponse)(nil),         // 30: ddev.administration.v1alpha1.ListCapabilitiesResponse
	(*ListWorkspaceResponse)(nil),            // 31: ddev.administration.v1alpha1.ListWorkspaceResponse
	(*AddWorkspaceAdminResponse)(nil),        // 32: ddev.administration.v1alpha1.AddWorkspaceAdminResponse
	(*AddWorkspaceDeveloperResponse)(nil),    // 33: ddev.administration.v1alpha1.AddWorkspaceDeveloperResponse
	(*DeleteWorkspaceAdminResponse)(nil),     // 34: ddev.administration.v1alpha1.DeleteWorkspaceAdminResponse
	(*DeleteWorkspaceDeveloperResponse)(nil), // 35: ddev.administration.v1alpha1.DeleteWorkspaceDeveloperResponse
	(*SetDefaultWorkspaceResponse)(nil),      // 36: ddev.administration.v1alpha1.SetDefaultWorkspaceResponse
	(*GetDefaultWorkspaceResponse)(nil),      // 37: ddev.administration.v1alpha1.GetDefaultWorkspaceResponse
	(*GetWorkspaceResponse)(nil),             // 38: ddev.administration.v1alpha1.GetWorkspaceResponse
	(*AuthorizationResponse)(nil),            // 39: ddev.administration.v1alpha1.AuthorizationResponse
	(*CreateGithubIntegrationResponse)(nil),  // 40: ddev.administration.v1alpha1.CreateGithubIntegrationResponse
	(*DeleteGithubIntegrationResponse)(nil),  // 41: ddev.administration.v1alpha1.DeleteGithubIntegrationResponse
	(*UpdateGithubIntegrationResponse)(nil),  // 42: ddev.administration.v1alpha1.UpdateGithubIntegrationResponse
	(*ListGithubRepositoriesResponse)(nil),   // 43: ddev.administration.v1alpha1.ListGithubRepositoriesResponse
	(*CreateGitlabIntegrationResponse)(nil),  // 44: ddev.administration.v1alpha1.CreateGitlabIntegrationResponse
	(*DeleteGitlabIntegrationResponse)(nil),  // 45: ddev.administration.v1alpha1.DeleteGitlabIntegrationResponse
	(*ListGitlabIntegrationsResponse)(nil),   // 46: ddev.administration.v1alpha1.ListGitlabIntegrationsResponse
	(*ListGitlabProjectsResponse)(nil),       // 47: ddev.administration.v1alpha1.ListGitlabProjectsResponse
	(*GetGitlabProjectMetadataResponse)(nil), // 48: ddev.administration.v1alpha1.GetGitlabProjectMetadataResponse
	(*GetRepositoryMetadataResponse)(nil),    // 49: ddev.administration.v1alpha1.GetRepositoryMetadataResponse
}
var file_live_administration_v1alpha1_service_proto_depIdxs = []int32{
	0,  // 0: ddev.administration.v1alpha1.Administration.CreateToken:input_type -> ddev.administration.v1alpha1.CreateTokenRequest
	1,  // 1: ddev.administration.v1alpha1.Administration.CreateRoles:input_type -> ddev.administration.v1alpha1.CreateRoleRequest
	2,  // 2: ddev.administration.v1alpha1.Administration.DescribeRole:input_type -> ddev.administration.v1alpha1.DescribeRoleRequest
	3,  // 3: ddev.administration.v1alpha1.Administration.ListRoles:input_type -> ddev.administration.v1alpha1.ListRolesRequest
	4,  // 4: ddev.administration.v1alpha1.Administration.SetCapabilities:input_type -> ddev.administration.v1alpha1.SetCapabilitiesRequest
	5,  // 5: ddev.administration.v1alpha1.Administration.ListCapabilities:input_type -> ddev.administration.v1alpha1.ListCapabilitiesRequest
	6,  // 6: ddev.administration.v1alpha1.Administration.ListWorkspaces:input_type -> ddev.administration.v1alpha1.ListWorkspaceRequest
	7,  // 7: ddev.administration.v1alpha1.Administration.AddWorkspaceAdmin:input_type -> ddev.administration.v1alpha1.AddWorkspaceAdminRequest
	8,  // 8: ddev.administration.v1alpha1.Administration.AddWorkspaceDeveloper:input_type -> ddev.administration.v1alpha1.AddWorkspaceDeveloperRequest
	9,  // 9: ddev.administration.v1alpha1.Administration.DeleteWorkspaceAdmin:input_type -> ddev.administration.v1alpha1.DeleteWorkspaceAdminRequest
	10, // 10: ddev.administration.v1alpha1.Administration.DeleteWorkspaceDeveloper:input_type -> ddev.administration.v1alpha1.DeleteWorkspaceDeveloperRequest
	11, // 11: ddev.administration.v1alpha1.Administration.SetDefaultWorkspace:input_type -> ddev.administration.v1alpha1.SetDefaultWorkspaceRequest
	12, // 12: ddev.administration.v1alpha1.Administration.GetDefaultWorkspace:input_type -> ddev.administration.v1alpha1.GetDefaultWorkspaceRequest
	13, // 13: ddev.administration.v1alpha1.Administration.GetWorkspace:input_type -> ddev.administration.v1alpha1.GetWorkspaceRequest
	14, // 14: ddev.administration.v1alpha1.Administration.IsAuthTokenViewer:input_type -> ddev.administration.v1alpha1.AuthorizationRequest
	14, // 15: ddev.administration.v1alpha1.Administration.IsAuthTokenEditor:input_type -> ddev.administration.v1alpha1.AuthorizationRequest
	14, // 16: ddev.administration.v1alpha1.Administration.IsBillingViewer:input_type -> ddev.administration.v1alpha1.AuthorizationRequest
	14, // 17: ddev.administration.v1alpha1.Administration.IsBillingEditor:input_type -> ddev.administration.v1alpha1.AuthorizationRequest
	14, // 18: ddev.administration.v1alpha1.Administration.IsWorkspaceAdmin:input_type -> ddev.administration.v1alpha1.AuthorizationRequest
	14, // 19: ddev.administration.v1alpha1.Administration.IsWorkspaceViewer:input_type -> ddev.administration.v1alpha1.AuthorizationRequest
	14, // 20: ddev.administration.v1alpha1.Administration.IsSiteEditor:input_type -> ddev.administration.v1alpha1.AuthorizationRequest
	14, // 21: ddev.administration.v1alpha1.Administration.IsSiteViewer:input_type -> ddev.administration.v1alpha1.AuthorizationRequest
	14, // 22: ddev.administration.v1alpha1.Administration.IsLogsViewer:input_type -> ddev.administration.v1alpha1.AuthorizationRequest
	14, // 23: ddev.administration.v1alpha1.Administration.IsSiteExecutor:input_type -> ddev.administration.v1alpha1.AuthorizationRequest
	14, // 24: ddev.administration.v1alpha1.Administration.IsDatabaseAdmin:input_type -> ddev.administration.v1alpha1.AuthorizationRequest
	14, // 25: ddev.administration.v1alpha1.Administration.IsDatabaseViewer:input_type -> ddev.administration.v1alpha1.AuthorizationRequest
	14, // 26: ddev.administration.v1alpha1.Administration.IsFileAdmin:input_type -> ddev.administration.v1alpha1.AuthorizationRequest
	14, // 27: ddev.administration.v1alpha1.Administration.IsFileViewer:input_type -> ddev.administration.v1alpha1.AuthorizationRequest
	15, // 28: ddev.administration.v1alpha1.Administration.CreateGithubIntegration:input_type -> ddev.administration.v1alpha1.CreateGithubIntegrationRequest
	16, // 29: ddev.administration.v1alpha1.Administration.DeleteGithubIntegration:input_type -> ddev.administration.v1alpha1.DeleteGithubIntegrationRequest
	17, // 30: ddev.administration.v1alpha1.Administration.UpdateGithubIntegration:input_type -> ddev.administration.v1alpha1.UpdateGithubIntegrationRequest
	18, // 31: ddev.administration.v1alpha1.Administration.ListGithubRepositories:input_type -> ddev.administration.v1alpha1.ListGithubRepositoriesRequest
	19, // 32: ddev.administration.v1alpha1.Administration.CreateGitlabIntegration:input_type -> ddev.administration.v1alpha1.CreateGitlabIntegrationRequest
	20, // 33: ddev.administration.v1alpha1.Administration.DeleteGitlabIntegration:input_type -> ddev.administration.v1alpha1.DeleteGitlabIntegrationRequest
	21, // 34: ddev.administration.v1alpha1.Administration.ListGitlabIntegrations:input_type -> ddev.administration.v1alpha1.ListGitlabIntegrationsRequest
	22, // 35: ddev.administration.v1alpha1.Administration.ListGitlabProjects:input_type -> ddev.administration.v1alpha1.ListGitlabProjectsRequest
	23, // 36: ddev.administration.v1alpha1.Administration.GetGitlabProjectMetadata:input_type -> ddev.administration.v1alpha1.GetGitlabProjectMetadataRequest
	24, // 37: ddev.administration.v1alpha1.Administration.GetRepositoryMetadata:input_type -> ddev.administration.v1alpha1.GetRepositoryMetadataRequest
	25, // 38: ddev.administration.v1alpha1.Administration.CreateToken:output_type -> ddev.administration.v1alpha1.CreateTokenResponse
	26, // 39: ddev.administration.v1alpha1.Administration.CreateRoles:output_type -> ddev.administration.v1alpha1.CreateRoleResponse
	27, // 40: ddev.administration.v1alpha1.Administration.DescribeRole:output_type -> ddev.administration.v1alpha1.DescribeRoleResponse
	28, // 41: ddev.administration.v1alpha1.Administration.ListRoles:output_type -> ddev.administration.v1alpha1.ListRolesResponse
	29, // 42: ddev.administration.v1alpha1.Administration.SetCapabilities:output_type -> ddev.administration.v1alpha1.SetCapabilitiesResponse
	30, // 43: ddev.administration.v1alpha1.Administration.ListCapabilities:output_type -> ddev.administration.v1alpha1.ListCapabilitiesResponse
	31, // 44: ddev.administration.v1alpha1.Administration.ListWorkspaces:output_type -> ddev.administration.v1alpha1.ListWorkspaceResponse
	32, // 45: ddev.administration.v1alpha1.Administration.AddWorkspaceAdmin:output_type -> ddev.administration.v1alpha1.AddWorkspaceAdminResponse
	33, // 46: ddev.administration.v1alpha1.Administration.AddWorkspaceDeveloper:output_type -> ddev.administration.v1alpha1.AddWorkspaceDeveloperResponse
	34, // 47: ddev.administration.v1alpha1.Administration.DeleteWorkspaceAdmin:output_type -> ddev.administration.v1alpha1.DeleteWorkspaceAdminResponse
	35, // 48: ddev.administration.v1alpha1.Administration.DeleteWorkspaceDeveloper:output_type -> ddev.administration.v1alpha1.DeleteWorkspaceDeveloperResponse
	36, // 49: ddev.administration.v1alpha1.Administration.SetDefaultWorkspace:output_type -> ddev.administration.v1alpha1.SetDefaultWorkspaceResponse
	37, // 50: ddev.administration.v1alpha1.Administration.GetDefaultWorkspace:output_type -> ddev.administration.v1alpha1.GetDefaultWorkspaceResponse
	38, // 51: ddev.administration.v1alpha1.Administration.GetWorkspace:output_type -> ddev.administration.v1alpha1.GetWorkspaceResponse
	39, // 52: ddev.administration.v1alpha1.Administration.IsAuthTokenViewer:output_type -> ddev.administration.v1alpha1.AuthorizationResponse
	39, // 53: ddev.administration.v1alpha1.Administration.IsAuthTokenEditor:output_type -> ddev.administration.v1alpha1.AuthorizationResponse
	39, // 54: ddev.administration.v1alpha1.Administration.IsBillingViewer:output_type -> ddev.administration.v1alpha1.AuthorizationResponse
	39, // 55: ddev.administration.v1alpha1.Administration.IsBillingEditor:output_type -> ddev.administration.v1alpha1.AuthorizationResponse
	39, // 56: ddev.administration.v1alpha1.Administration.IsWorkspaceAdmin:output_type -> ddev.administration.v1alpha1.AuthorizationResponse
	39, // 57: ddev.administration.v1alpha1.Administration.IsWorkspaceViewer:output_type -> ddev.administration.v1alpha1.AuthorizationResponse
	39, // 58: ddev.administration.v1alpha1.Administration.IsSiteEditor:output_type -> ddev.administration.v1alpha1.AuthorizationResponse
	39, // 59: ddev.administration.v1alpha1.Administration.IsSiteViewer:output_type -> ddev.administration.v1alpha1.AuthorizationResponse
	39, // 60: ddev.administration.v1alpha1.Administration.IsLogsViewer:output_type -> ddev.administration.v1alpha1.AuthorizationResponse
	39, // 61: ddev.administration.v1alpha1.Administration.IsSiteExecutor:output_type -> ddev.administration.v1alpha1.AuthorizationResponse
	39, // 62: ddev.administration.v1alpha1.Administration.IsDatabaseAdmin:output_type -> ddev.administration.v1alpha1.AuthorizationResponse
	39, // 63: ddev.administration.v1alpha1.Administration.IsDatabaseViewer:output_type -> ddev.administration.v1alpha1.AuthorizationResponse
	39, // 64: ddev.administration.v1alpha1.Administration.IsFileAdmin:output_type -> ddev.administration.v1alpha1.AuthorizationResponse
	39, // 65: ddev.administration.v1alpha1.Administration.IsFileViewer:output_type -> ddev.administration.v1alpha1.AuthorizationResponse
	40, // 66: ddev.administration.v1alpha1.Administration.CreateGithubIntegration:output_type -> ddev.administration.v1alpha1.CreateGithubIntegrationResponse
	41, // 67: ddev.administration.v1alpha1.Administration.DeleteGithubIntegration:output_type -> ddev.administration.v1alpha1.DeleteGithubIntegrationResponse
	42, // 68: ddev.administration.v1alpha1.Administration.UpdateGithubIntegration:output_type -> ddev.administration.v1alpha1.UpdateGithubIntegrationResponse
	43, // 69: ddev.administration.v1alpha1.Administration.ListGithubRepositories:output_type -> ddev.administration.v1alpha1.ListGithubRepositoriesResponse
	44, // 70: ddev.administration.v1alpha1.Administration.CreateGitlabIntegration:output_type -> ddev.administration.v1alpha1.CreateGitlabIntegrationResponse
	45, // 71: ddev.administration.v1alpha1.Administration.DeleteGitlabIntegration:output_type -> ddev.administration.v1alpha1.DeleteGitlabIntegrationResponse
	46, // 72: ddev.administration.v1alpha1.Administration.ListGitlabIntegrations:output_type -> ddev.administration.v1alpha1.ListGitlabIntegrationsResponse
	47, // 73: ddev.administration.v1alpha1.Administration.ListGitlabProjects:output_type -> ddev.administration.v1alpha1.ListGitlabProjectsResponse
	48, // 74: ddev.administration.v1alpha1.Administration.GetGitlabProjectMetadata:output_type -> ddev.administration.v1alpha1.GetGitlabProjectMetadataResponse
	49, // 75: ddev.administration.v1alpha1.Administration.GetRepositoryMetadata:output_type -> ddev.administration.v1alpha1.GetRepositoryMetadataResponse
	38, // [38:76] is the sub-list for method output_type
	0,  // [0:38] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_live_administration_v1alpha1_service_proto_init() }
func file_live_administration_v1alpha1_service_proto_init() {
	if File_live_administration_v1alpha1_service_proto != nil {
		return
	}
	file_live_administration_v1alpha1_auth_proto_init()
	file_live_administration_v1alpha1_workspace_proto_init()
	file_live_administration_v1alpha1_githubintegration_proto_init()
	file_live_administration_v1alpha1_gitlabintegration_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_live_administration_v1alpha1_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_live_administration_v1alpha1_service_proto_goTypes,
		DependencyIndexes: file_live_administration_v1alpha1_service_proto_depIdxs,
	}.Build()
	File_live_administration_v1alpha1_service_proto = out.File
	file_live_administration_v1alpha1_service_proto_rawDesc = nil
	file_live_administration_v1alpha1_service_proto_goTypes = nil
	file_live_administration_v1alpha1_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AdministrationClient is the client API for Administration service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AdministrationClient interface {
	CreateToken(ctx context.Context, in *CreateTokenRequest, opts ...grpc.CallOption) (*CreateTokenResponse, error)
	CreateRoles(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*CreateRoleResponse, error)
	DescribeRole(ctx context.Context, in *DescribeRoleRequest, opts ...grpc.CallOption) (*DescribeRoleResponse, error)
	ListRoles(ctx context.Context, in *ListRolesRequest, opts ...grpc.CallOption) (*ListRolesResponse, error)
	SetCapabilities(ctx context.Context, in *SetCapabilitiesRequest, opts ...grpc.CallOption) (*SetCapabilitiesResponse, error)
	ListCapabilities(ctx context.Context, in *ListCapabilitiesRequest, opts ...grpc.CallOption) (*ListCapabilitiesResponse, error)
	ListWorkspaces(ctx context.Context, in *ListWorkspaceRequest, opts ...grpc.CallOption) (*ListWorkspaceResponse, error)
	AddWorkspaceAdmin(ctx context.Context, in *AddWorkspaceAdminRequest, opts ...grpc.CallOption) (*AddWorkspaceAdminResponse, error)
	AddWorkspaceDeveloper(ctx context.Context, in *AddWorkspaceDeveloperRequest, opts ...grpc.CallOption) (*AddWorkspaceDeveloperResponse, error)
	DeleteWorkspaceAdmin(ctx context.Context, in *DeleteWorkspaceAdminRequest, opts ...grpc.CallOption) (*DeleteWorkspaceAdminResponse, error)
	DeleteWorkspaceDeveloper(ctx context.Context, in *DeleteWorkspaceDeveloperRequest, opts ...grpc.CallOption) (*DeleteWorkspaceDeveloperResponse, error)
	SetDefaultWorkspace(ctx context.Context, in *SetDefaultWorkspaceRequest, opts ...grpc.CallOption) (*SetDefaultWorkspaceResponse, error)
	GetDefaultWorkspace(ctx context.Context, in *GetDefaultWorkspaceRequest, opts ...grpc.CallOption) (*GetDefaultWorkspaceResponse, error)
	GetWorkspace(ctx context.Context, in *GetWorkspaceRequest, opts ...grpc.CallOption) (*GetWorkspaceResponse, error)
	IsAuthTokenViewer(ctx context.Context, in *AuthorizationRequest, opts ...grpc.CallOption) (*AuthorizationResponse, error)
	IsAuthTokenEditor(ctx context.Context, in *AuthorizationRequest, opts ...grpc.CallOption) (*AuthorizationResponse, error)
	IsBillingViewer(ctx context.Context, in *AuthorizationRequest, opts ...grpc.CallOption) (*AuthorizationResponse, error)
	IsBillingEditor(ctx context.Context, in *AuthorizationRequest, opts ...grpc.CallOption) (*AuthorizationResponse, error)
	IsWorkspaceAdmin(ctx context.Context, in *AuthorizationRequest, opts ...grpc.CallOption) (*AuthorizationResponse, error)
	IsWorkspaceViewer(ctx context.Context, in *AuthorizationRequest, opts ...grpc.CallOption) (*AuthorizationResponse, error)
	IsSiteEditor(ctx context.Context, in *AuthorizationRequest, opts ...grpc.CallOption) (*AuthorizationResponse, error)
	IsSiteViewer(ctx context.Context, in *AuthorizationRequest, opts ...grpc.CallOption) (*AuthorizationResponse, error)
	IsLogsViewer(ctx context.Context, in *AuthorizationRequest, opts ...grpc.CallOption) (*AuthorizationResponse, error)
	IsSiteExecutor(ctx context.Context, in *AuthorizationRequest, opts ...grpc.CallOption) (*AuthorizationResponse, error)
	IsDatabaseAdmin(ctx context.Context, in *AuthorizationRequest, opts ...grpc.CallOption) (*AuthorizationResponse, error)
	IsDatabaseViewer(ctx context.Context, in *AuthorizationRequest, opts ...grpc.CallOption) (*AuthorizationResponse, error)
	IsFileAdmin(ctx context.Context, in *AuthorizationRequest, opts ...grpc.CallOption) (*AuthorizationResponse, error)
	IsFileViewer(ctx context.Context, in *AuthorizationRequest, opts ...grpc.CallOption) (*AuthorizationResponse, error)
	CreateGithubIntegration(ctx context.Context, in *CreateGithubIntegrationRequest, opts ...grpc.CallOption) (*CreateGithubIntegrationResponse, error)
	DeleteGithubIntegration(ctx context.Context, in *DeleteGithubIntegrationRequest, opts ...grpc.CallOption) (*DeleteGithubIntegrationResponse, error)
	UpdateGithubIntegration(ctx context.Context, in *UpdateGithubIntegrationRequest, opts ...grpc.CallOption) (*UpdateGithubIntegrationResponse, error)
	ListGithubRepositories(ctx context.Context, in *ListGithubRepositoriesRequest, opts ...grpc.CallOption) (*ListGithubRepositoriesResponse, error)
	CreateGitlabIntegration(ctx context.Context, in *CreateGitlabIntegrationRequest, opts ...grpc.CallOption) (*CreateGitlabIntegrationResponse, error)
	DeleteGitlabIntegration(ctx context.Context, in *DeleteGitlabIntegrationRequest, opts ...grpc.CallOption) (*DeleteGitlabIntegrationResponse, error)
	ListGitlabIntegrations(ctx context.Context, in *ListGitlabIntegrationsRequest, opts ...grpc.CallOption) (*ListGitlabIntegrationsResponse, error)
	ListGitlabProjects(ctx context.Context, in *ListGitlabProjectsRequest, opts ...grpc.CallOption) (*ListGitlabProjectsResponse, error)
	GetGitlabProjectMetadata(ctx context.Context, in *GetGitlabProjectMetadataRequest, opts ...grpc.CallOption) (*GetGitlabProjectMetadataResponse, error)
	GetRepositoryMetadata(ctx context.Context, in *GetRepositoryMetadataRequest, opts ...grpc.CallOption) (*GetRepositoryMetadataResponse, error)
}

type administrationClient struct {
	cc grpc.ClientConnInterface
}

func NewAdministrationClient(cc grpc.ClientConnInterface) AdministrationClient {
	return &administrationClient{cc}
}

func (c *administrationClient) CreateToken(ctx context.Context, in *CreateTokenRequest, opts ...grpc.CallOption) (*CreateTokenResponse, error) {
	out := new(CreateTokenResponse)
	err := c.cc.Invoke(ctx, "/ddev.administration.v1alpha1.Administration/CreateToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *administrationClient) CreateRoles(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*CreateRoleResponse, error) {
	out := new(CreateRoleResponse)
	err := c.cc.Invoke(ctx, "/ddev.administration.v1alpha1.Administration/CreateRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *administrationClient) DescribeRole(ctx context.Context, in *DescribeRoleRequest, opts ...grpc.CallOption) (*DescribeRoleResponse, error) {
	out := new(DescribeRoleResponse)
	err := c.cc.Invoke(ctx, "/ddev.administration.v1alpha1.Administration/DescribeRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *administrationClient) ListRoles(ctx context.Context, in *ListRolesRequest, opts ...grpc.CallOption) (*ListRolesResponse, error) {
	out := new(ListRolesResponse)
	err := c.cc.Invoke(ctx, "/ddev.administration.v1alpha1.Administration/ListRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *administrationClient) SetCapabilities(ctx context.Context, in *SetCapabilitiesRequest, opts ...grpc.CallOption) (*SetCapabilitiesResponse, error) {
	out := new(SetCapabilitiesResponse)
	err := c.cc.Invoke(ctx, "/ddev.administration.v1alpha1.Administration/SetCapabilities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *administrationClient) ListCapabilities(ctx context.Context, in *ListCapabilitiesRequest, opts ...grpc.CallOption) (*ListCapabilitiesResponse, error) {
	out := new(ListCapabilitiesResponse)
	err := c.cc.Invoke(ctx, "/ddev.administration.v1alpha1.Administration/ListCapabilities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *administrationClient) ListWorkspaces(ctx context.Context, in *ListWorkspaceRequest, opts ...grpc.CallOption) (*ListWorkspaceResponse, error) {
	out := new(ListWorkspaceResponse)
	err := c.cc.Invoke(ctx, "/ddev.administration.v1alpha1.Administration/ListWorkspaces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *administrationClient) AddWorkspaceAdmin(ctx context.Context, in *AddWorkspaceAdminRequest, opts ...grpc.CallOption) (*AddWorkspaceAdminResponse, error) {
	out := new(AddWorkspaceAdminResponse)
	err := c.cc.Invoke(ctx, "/ddev.administration.v1alpha1.Administration/AddWorkspaceAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *administrationClient) AddWorkspaceDeveloper(ctx context.Context, in *AddWorkspaceDeveloperRequest, opts ...grpc.CallOption) (*AddWorkspaceDeveloperResponse, error) {
	out := new(AddWorkspaceDeveloperResponse)
	err := c.cc.Invoke(ctx, "/ddev.administration.v1alpha1.Administration/AddWorkspaceDeveloper", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *administrationClient) DeleteWorkspaceAdmin(ctx context.Context, in *DeleteWorkspaceAdminRequest, opts ...grpc.CallOption) (*DeleteWorkspaceAdminResponse, error) {
	out := new(DeleteWorkspaceAdminResponse)
	err := c.cc.Invoke(ctx, "/ddev.administration.v1alpha1.Administration/DeleteWorkspaceAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *administrationClient) DeleteWorkspaceDeveloper(ctx context.Context, in *DeleteWorkspaceDeveloperRequest, opts ...grpc.CallOption) (*DeleteWorkspaceDeveloperResponse, error) {
	out := new(DeleteWorkspaceDeveloperResponse)
	err := c.cc.Invoke(ctx, "/ddev.administration.v1alpha1.Administration/DeleteWorkspaceDeveloper", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *administrationClient) SetDefaultWorkspace(ctx context.Context, in *SetDefaultWorkspaceRequest, opts ...grpc.CallOption) (*SetDefaultWorkspaceResponse, error) {
	out := new(SetDefaultWorkspaceResponse)
	err := c.cc.Invoke(ctx, "/ddev.administration.v1alpha1.Administration/SetDefaultWorkspace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *administrationClient) GetDefaultWorkspace(ctx context.Context, in *GetDefaultWorkspaceRequest, opts ...grpc.CallOption) (*GetDefaultWorkspaceResponse, error) {
	out := new(GetDefaultWorkspaceResponse)
	err := c.cc.Invoke(ctx, "/ddev.administration.v1alpha1.Administration/GetDefaultWorkspace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *administrationClient) GetWorkspace(ctx context.Context, in *GetWorkspaceRequest, opts ...grpc.CallOption) (*GetWorkspaceResponse, error) {
	out := new(GetWorkspaceResponse)
	err := c.cc.Invoke(ctx, "/ddev.administration.v1alpha1.Administration/GetWorkspace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *administrationClient) IsAuthTokenViewer(ctx context.Context, in *AuthorizationRequest, opts ...grpc.CallOption) (*AuthorizationResponse, error) {
	out := new(AuthorizationResponse)
	err := c.cc.Invoke(ctx, "/ddev.administration.v1alpha1.Administration/IsAuthTokenViewer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *administrationClient) IsAuthTokenEditor(ctx context.Context, in *AuthorizationRequest, opts ...grpc.CallOption) (*AuthorizationResponse, error) {
	out := new(AuthorizationResponse)
	err := c.cc.Invoke(ctx, "/ddev.administration.v1alpha1.Administration/IsAuthTokenEditor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *administrationClient) IsBillingViewer(ctx context.Context, in *AuthorizationRequest, opts ...grpc.CallOption) (*AuthorizationResponse, error) {
	out := new(AuthorizationResponse)
	err := c.cc.Invoke(ctx, "/ddev.administration.v1alpha1.Administration/IsBillingViewer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *administrationClient) IsBillingEditor(ctx context.Context, in *AuthorizationRequest, opts ...grpc.CallOption) (*AuthorizationResponse, error) {
	out := new(AuthorizationResponse)
	err := c.cc.Invoke(ctx, "/ddev.administration.v1alpha1.Administration/IsBillingEditor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *administrationClient) IsWorkspaceAdmin(ctx context.Context, in *AuthorizationRequest, opts ...grpc.CallOption) (*AuthorizationResponse, error) {
	out := new(AuthorizationResponse)
	err := c.cc.Invoke(ctx, "/ddev.administration.v1alpha1.Administration/IsWorkspaceAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *administrationClient) IsWorkspaceViewer(ctx context.Context, in *AuthorizationRequest, opts ...grpc.CallOption) (*AuthorizationResponse, error) {
	out := new(AuthorizationResponse)
	err := c.cc.Invoke(ctx, "/ddev.administration.v1alpha1.Administration/IsWorkspaceViewer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *administrationClient) IsSiteEditor(ctx context.Context, in *AuthorizationRequest, opts ...grpc.CallOption) (*AuthorizationResponse, error) {
	out := new(AuthorizationResponse)
	err := c.cc.Invoke(ctx, "/ddev.administration.v1alpha1.Administration/IsSiteEditor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *administrationClient) IsSiteViewer(ctx context.Context, in *AuthorizationRequest, opts ...grpc.CallOption) (*AuthorizationResponse, error) {
	out := new(AuthorizationResponse)
	err := c.cc.Invoke(ctx, "/ddev.administration.v1alpha1.Administration/IsSiteViewer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *administrationClient) IsLogsViewer(ctx context.Context, in *AuthorizationRequest, opts ...grpc.CallOption) (*AuthorizationResponse, error) {
	out := new(AuthorizationResponse)
	err := c.cc.Invoke(ctx, "/ddev.administration.v1alpha1.Administration/IsLogsViewer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *administrationClient) IsSiteExecutor(ctx context.Context, in *AuthorizationRequest, opts ...grpc.CallOption) (*AuthorizationResponse, error) {
	out := new(AuthorizationResponse)
	err := c.cc.Invoke(ctx, "/ddev.administration.v1alpha1.Administration/IsSiteExecutor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *administrationClient) IsDatabaseAdmin(ctx context.Context, in *AuthorizationRequest, opts ...grpc.CallOption) (*AuthorizationResponse, error) {
	out := new(AuthorizationResponse)
	err := c.cc.Invoke(ctx, "/ddev.administration.v1alpha1.Administration/IsDatabaseAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *administrationClient) IsDatabaseViewer(ctx context.Context, in *AuthorizationRequest, opts ...grpc.CallOption) (*AuthorizationResponse, error) {
	out := new(AuthorizationResponse)
	err := c.cc.Invoke(ctx, "/ddev.administration.v1alpha1.Administration/IsDatabaseViewer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *administrationClient) IsFileAdmin(ctx context.Context, in *AuthorizationRequest, opts ...grpc.CallOption) (*AuthorizationResponse, error) {
	out := new(AuthorizationResponse)
	err := c.cc.Invoke(ctx, "/ddev.administration.v1alpha1.Administration/IsFileAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *administrationClient) IsFileViewer(ctx context.Context, in *AuthorizationRequest, opts ...grpc.CallOption) (*AuthorizationResponse, error) {
	out := new(AuthorizationResponse)
	err := c.cc.Invoke(ctx, "/ddev.administration.v1alpha1.Administration/IsFileViewer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *administrationClient) CreateGithubIntegration(ctx context.Context, in *CreateGithubIntegrationRequest, opts ...grpc.CallOption) (*CreateGithubIntegrationResponse, error) {
	out := new(CreateGithubIntegrationResponse)
	err := c.cc.Invoke(ctx, "/ddev.administration.v1alpha1.Administration/CreateGithubIntegration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *administrationClient) DeleteGithubIntegration(ctx context.Context, in *DeleteGithubIntegrationRequest, opts ...grpc.CallOption) (*DeleteGithubIntegrationResponse, error) {
	out := new(DeleteGithubIntegrationResponse)
	err := c.cc.Invoke(ctx, "/ddev.administration.v1alpha1.Administration/DeleteGithubIntegration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *administrationClient) UpdateGithubIntegration(ctx context.Context, in *UpdateGithubIntegrationRequest, opts ...grpc.CallOption) (*UpdateGithubIntegrationResponse, error) {
	out := new(UpdateGithubIntegrationResponse)
	err := c.cc.Invoke(ctx, "/ddev.administration.v1alpha1.Administration/UpdateGithubIntegration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *administrationClient) ListGithubRepositories(ctx context.Context, in *ListGithubRepositoriesRequest, opts ...grpc.CallOption) (*ListGithubRepositoriesResponse, error) {
	out := new(ListGithubRepositoriesResponse)
	err := c.cc.Invoke(ctx, "/ddev.administration.v1alpha1.Administration/ListGithubRepositories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *administrationClient) CreateGitlabIntegration(ctx context.Context, in *CreateGitlabIntegrationRequest, opts ...grpc.CallOption) (*CreateGitlabIntegrationResponse, error) {
	out := new(CreateGitlabIntegrationResponse)
	err := c.cc.Invoke(ctx, "/ddev.administration.v1alpha1.Administration/CreateGitlabIntegration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *administrationClient) DeleteGitlabIntegration(ctx context.Context, in *DeleteGitlabIntegrationRequest, opts ...grpc.CallOption) (*DeleteGitlabIntegrationResponse, error) {
	out := new(DeleteGitlabIntegrationResponse)
	err := c.cc.Invoke(ctx, "/ddev.administration.v1alpha1.Administration/DeleteGitlabIntegration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *administrationClient) ListGitlabIntegrations(ctx context.Context, in *ListGitlabIntegrationsRequest, opts ...grpc.CallOption) (*ListGitlabIntegrationsResponse, error) {
	out := new(ListGitlabIntegrationsResponse)
	err := c.cc.Invoke(ctx, "/ddev.administration.v1alpha1.Administration/ListGitlabIntegrations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *administrationClient) ListGitlabProjects(ctx context.Context, in *ListGitlabProjectsRequest, opts ...grpc.CallOption) (*ListGitlabProjectsResponse, error) {
	out := new(ListGitlabProjectsResponse)
	err := c.cc.Invoke(ctx, "/ddev.administration.v1alpha1.Administration/ListGitlabProjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *administrationClient) GetGitlabProjectMetadata(ctx context.Context, in *GetGitlabProjectMetadataRequest, opts ...grpc.CallOption) (*GetGitlabProjectMetadataResponse, error) {
	out := new(GetGitlabProjectMetadataResponse)
	err := c.cc.Invoke(ctx, "/ddev.administration.v1alpha1.Administration/GetGitlabProjectMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *administrationClient) GetRepositoryMetadata(ctx context.Context, in *GetRepositoryMetadataRequest, opts ...grpc.CallOption) (*GetRepositoryMetadataResponse, error) {
	out := new(GetRepositoryMetadataResponse)
	err := c.cc.Invoke(ctx, "/ddev.administration.v1alpha1.Administration/GetRepositoryMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdministrationServer is the server API for Administration service.
type AdministrationServer interface {
	CreateToken(context.Context, *CreateTokenRequest) (*CreateTokenResponse, error)
	CreateRoles(context.Context, *CreateRoleRequest) (*CreateRoleResponse, error)
	DescribeRole(context.Context, *DescribeRoleRequest) (*DescribeRoleResponse, error)
	ListRoles(context.Context, *ListRolesRequest) (*ListRolesResponse, error)
	SetCapabilities(context.Context, *SetCapabilitiesRequest) (*SetCapabilitiesResponse, error)
	ListCapabilities(context.Context, *ListCapabilitiesRequest) (*ListCapabilitiesResponse, error)
	ListWorkspaces(context.Context, *ListWorkspaceRequest) (*ListWorkspaceResponse, error)
	AddWorkspaceAdmin(context.Context, *AddWorkspaceAdminRequest) (*AddWorkspaceAdminResponse, error)
	AddWorkspaceDeveloper(context.Context, *AddWorkspaceDeveloperRequest) (*AddWorkspaceDeveloperResponse, error)
	DeleteWorkspaceAdmin(context.Context, *DeleteWorkspaceAdminRequest) (*DeleteWorkspaceAdminResponse, error)
	DeleteWorkspaceDeveloper(context.Context, *DeleteWorkspaceDeveloperRequest) (*DeleteWorkspaceDeveloperResponse, error)
	SetDefaultWorkspace(context.Context, *SetDefaultWorkspaceRequest) (*SetDefaultWorkspaceResponse, error)
	GetDefaultWorkspace(context.Context, *GetDefaultWorkspaceRequest) (*GetDefaultWorkspaceResponse, error)
	GetWorkspace(context.Context, *GetWorkspaceRequest) (*GetWorkspaceResponse, error)
	IsAuthTokenViewer(context.Context, *AuthorizationRequest) (*AuthorizationResponse, error)
	IsAuthTokenEditor(context.Context, *AuthorizationRequest) (*AuthorizationResponse, error)
	IsBillingViewer(context.Context, *AuthorizationRequest) (*AuthorizationResponse, error)
	IsBillingEditor(context.Context, *AuthorizationRequest) (*AuthorizationResponse, error)
	IsWorkspaceAdmin(context.Context, *AuthorizationRequest) (*AuthorizationResponse, error)
	IsWorkspaceViewer(context.Context, *AuthorizationRequest) (*AuthorizationResponse, error)
	IsSiteEditor(context.Context, *AuthorizationRequest) (*AuthorizationResponse, error)
	IsSiteViewer(context.Context, *AuthorizationRequest) (*AuthorizationResponse, error)
	IsLogsViewer(context.Context, *AuthorizationRequest) (*AuthorizationResponse, error)
	IsSiteExecutor(context.Context, *AuthorizationRequest) (*AuthorizationResponse, error)
	IsDatabaseAdmin(context.Context, *AuthorizationRequest) (*AuthorizationResponse, error)
	IsDatabaseViewer(context.Context, *AuthorizationRequest) (*AuthorizationResponse, error)
	IsFileAdmin(context.Context, *AuthorizationRequest) (*AuthorizationResponse, error)
	IsFileViewer(context.Context, *AuthorizationRequest) (*AuthorizationResponse, error)
	CreateGithubIntegration(context.Context, *CreateGithubIntegrationRequest) (*CreateGithubIntegrationResponse, error)
	DeleteGithubIntegration(context.Context, *DeleteGithubIntegrationRequest) (*DeleteGithubIntegrationResponse, error)
	UpdateGithubIntegration(context.Context, *UpdateGithubIntegrationRequest) (*UpdateGithubIntegrationResponse, error)
	ListGithubRepositories(context.Context, *ListGithubRepositoriesRequest) (*ListGithubRepositoriesResponse, error)
	CreateGitlabIntegration(context.Context, *CreateGitlabIntegrationRequest) (*CreateGitlabIntegrationResponse, error)
	DeleteGitlabIntegration(context.Context, *DeleteGitlabIntegrationRequest) (*DeleteGitlabIntegrationResponse, error)
	ListGitlabIntegrations(context.Context, *ListGitlabIntegrationsRequest) (*ListGitlabIntegrationsResponse, error)
	ListGitlabProjects(context.Context, *ListGitlabProjectsRequest) (*ListGitlabProjectsResponse, error)
	GetGitlabProjectMetadata(context.Context, *GetGitlabProjectMetadataRequest) (*GetGitlabProjectMetadataResponse, error)
	GetRepositoryMetadata(context.Context, *GetRepositoryMetadataRequest) (*GetRepositoryMetadataResponse, error)
}

// UnimplementedAdministrationServer can be embedded to have forward compatible implementations.
type UnimplementedAdministrationServer struct {
}

func (*UnimplementedAdministrationServer) CreateToken(context.Context, *CreateTokenRequest) (*CreateTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateToken not implemented")
}
func (*UnimplementedAdministrationServer) CreateRoles(context.Context, *CreateRoleRequest) (*CreateRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoles not implemented")
}
func (*UnimplementedAdministrationServer) DescribeRole(context.Context, *DescribeRoleRequest) (*DescribeRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeRole not implemented")
}
func (*UnimplementedAdministrationServer) ListRoles(context.Context, *ListRolesRequest) (*ListRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoles not implemented")
}
func (*UnimplementedAdministrationServer) SetCapabilities(context.Context, *SetCapabilitiesRequest) (*SetCapabilitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCapabilities not implemented")
}
func (*UnimplementedAdministrationServer) ListCapabilities(context.Context, *ListCapabilitiesRequest) (*ListCapabilitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCapabilities not implemented")
}
func (*UnimplementedAdministrationServer) ListWorkspaces(context.Context, *ListWorkspaceRequest) (*ListWorkspaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkspaces not implemented")
}
func (*UnimplementedAdministrationServer) AddWorkspaceAdmin(context.Context, *AddWorkspaceAdminRequest) (*AddWorkspaceAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddWorkspaceAdmin not implemented")
}
func (*UnimplementedAdministrationServer) AddWorkspaceDeveloper(context.Context, *AddWorkspaceDeveloperRequest) (*AddWorkspaceDeveloperResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddWorkspaceDeveloper not implemented")
}
func (*UnimplementedAdministrationServer) DeleteWorkspaceAdmin(context.Context, *DeleteWorkspaceAdminRequest) (*DeleteWorkspaceAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWorkspaceAdmin not implemented")
}
func (*UnimplementedAdministrationServer) DeleteWorkspaceDeveloper(context.Context, *DeleteWorkspaceDeveloperRequest) (*DeleteWorkspaceDeveloperResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWorkspaceDeveloper not implemented")
}
func (*UnimplementedAdministrationServer) SetDefaultWorkspace(context.Context, *SetDefaultWorkspaceRequest) (*SetDefaultWorkspaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDefaultWorkspace not implemented")
}
func (*UnimplementedAdministrationServer) GetDefaultWorkspace(context.Context, *GetDefaultWorkspaceRequest) (*GetDefaultWorkspaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaultWorkspace not implemented")
}
func (*UnimplementedAdministrationServer) GetWorkspace(context.Context, *GetWorkspaceRequest) (*GetWorkspaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkspace not implemented")
}
func (*UnimplementedAdministrationServer) IsAuthTokenViewer(context.Context, *AuthorizationRequest) (*AuthorizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsAuthTokenViewer not implemented")
}
func (*UnimplementedAdministrationServer) IsAuthTokenEditor(context.Context, *AuthorizationRequest) (*AuthorizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsAuthTokenEditor not implemented")
}
func (*UnimplementedAdministrationServer) IsBillingViewer(context.Context, *AuthorizationRequest) (*AuthorizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsBillingViewer not implemented")
}
func (*UnimplementedAdministrationServer) IsBillingEditor(context.Context, *AuthorizationRequest) (*AuthorizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsBillingEditor not implemented")
}
func (*UnimplementedAdministrationServer) IsWorkspaceAdmin(context.Context, *AuthorizationRequest) (*AuthorizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsWorkspaceAdmin not implemented")
}
func (*UnimplementedAdministrationServer) IsWorkspaceViewer(context.Context, *AuthorizationRequest) (*AuthorizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsWorkspaceViewer not implemented")
}
func (*UnimplementedAdministrationServer) IsSiteEditor(context.Context, *AuthorizationRequest) (*AuthorizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsSiteEditor not implemented")
}
func (*UnimplementedAdministrationServer) IsSiteViewer(context.Context, *AuthorizationRequest) (*AuthorizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsSiteViewer not implemented")
}
func (*UnimplementedAdministrationServer) IsLogsViewer(context.Context, *AuthorizationRequest) (*AuthorizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsLogsViewer not implemented")
}
func (*UnimplementedAdministrationServer) IsSiteExecutor(context.Context, *AuthorizationRequest) (*AuthorizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsSiteExecutor not implemented")
}
func (*UnimplementedAdministrationServer) IsDatabaseAdmin(context.Context, *AuthorizationRequest) (*AuthorizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsDatabaseAdmin not implemented")
}
func (*UnimplementedAdministrationServer) IsDatabaseViewer(context.Context, *AuthorizationRequest) (*AuthorizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsDatabaseViewer not implemented")
}
func (*UnimplementedAdministrationServer) IsFileAdmin(context.Context, *AuthorizationRequest) (*AuthorizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsFileAdmin not implemented")
}
func (*UnimplementedAdministrationServer) IsFileViewer(context.Context, *AuthorizationRequest) (*AuthorizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsFileViewer not implemented")
}
func (*UnimplementedAdministrationServer) CreateGithubIntegration(context.Context, *CreateGithubIntegrationRequest) (*CreateGithubIntegrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGithubIntegration not implemented")
}
func (*UnimplementedAdministrationServer) DeleteGithubIntegration(context.Context, *DeleteGithubIntegrationRequest) (*DeleteGithubIntegrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGithubIntegration not implemented")
}
func (*UnimplementedAdministrationServer) UpdateGithubIntegration(context.Context, *UpdateGithubIntegrationRequest) (*UpdateGithubIntegrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGithubIntegration not implemented")
}
func (*UnimplementedAdministrationServer) ListGithubRepositories(context.Context, *ListGithubRepositoriesRequest) (*ListGithubRepositoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGithubRepositories not implemented")
}
func (*UnimplementedAdministrationServer) CreateGitlabIntegration(context.Context, *CreateGitlabIntegrationRequest) (*CreateGitlabIntegrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGitlabIntegration not implemented")
}
func (*UnimplementedAdministrationServer) DeleteGitlabIntegration(context.Context, *DeleteGitlabIntegrationRequest) (*DeleteGitlabIntegrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGitlabIntegration not implemented")
}
func (*UnimplementedAdministrationServer) ListGitlabIntegrations(context.Context, *ListGitlabIntegrationsRequest) (*ListGitlabIntegrationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGitlabIntegrations not implemented")
}
func (*UnimplementedAdministrationServer) ListGitlabProjects(context.Context, *ListGitlabProjectsRequest) (*ListGitlabProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGitlabProjects not implemented")
}
func (*UnimplementedAdministrationServer) GetGitlabProjectMetadata(context.Context, *GetGitlabProjectMetadataRequest) (*GetGitlabProjectMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGitlabProjectMetadata not implemented")
}
func (*UnimplementedAdministrationServer) GetRepositoryMetadata(context.Context, *GetRepositoryMetadataRequest) (*GetRepositoryMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRepositoryMetadata not implemented")
}

func RegisterAdministrationServer(s *grpc.Server, srv AdministrationServer) {
	s.RegisterService(&_Administration_serviceDesc, srv)
}

func _Administration_CreateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministrationServer).CreateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ddev.administration.v1alpha1.Administration/CreateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministrationServer).CreateToken(ctx, req.(*CreateTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Administration_CreateRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministrationServer).CreateRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ddev.administration.v1alpha1.Administration/CreateRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministrationServer).CreateRoles(ctx, req.(*CreateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Administration_DescribeRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministrationServer).DescribeRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ddev.administration.v1alpha1.Administration/DescribeRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministrationServer).DescribeRole(ctx, req.(*DescribeRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Administration_ListRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministrationServer).ListRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ddev.administration.v1alpha1.Administration/ListRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministrationServer).ListRoles(ctx, req.(*ListRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Administration_SetCapabilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCapabilitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministrationServer).SetCapabilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ddev.administration.v1alpha1.Administration/SetCapabilities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministrationServer).SetCapabilities(ctx, req.(*SetCapabilitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Administration_ListCapabilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCapabilitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministrationServer).ListCapabilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ddev.administration.v1alpha1.Administration/ListCapabilities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministrationServer).ListCapabilities(ctx, req.(*ListCapabilitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Administration_ListWorkspaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWorkspaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministrationServer).ListWorkspaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ddev.administration.v1alpha1.Administration/ListWorkspaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministrationServer).ListWorkspaces(ctx, req.(*ListWorkspaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Administration_AddWorkspaceAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddWorkspaceAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministrationServer).AddWorkspaceAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ddev.administration.v1alpha1.Administration/AddWorkspaceAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministrationServer).AddWorkspaceAdmin(ctx, req.(*AddWorkspaceAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Administration_AddWorkspaceDeveloper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddWorkspaceDeveloperRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministrationServer).AddWorkspaceDeveloper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ddev.administration.v1alpha1.Administration/AddWorkspaceDeveloper",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministrationServer).AddWorkspaceDeveloper(ctx, req.(*AddWorkspaceDeveloperRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Administration_DeleteWorkspaceAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWorkspaceAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministrationServer).DeleteWorkspaceAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ddev.administration.v1alpha1.Administration/DeleteWorkspaceAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministrationServer).DeleteWorkspaceAdmin(ctx, req.(*DeleteWorkspaceAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Administration_DeleteWorkspaceDeveloper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWorkspaceDeveloperRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministrationServer).DeleteWorkspaceDeveloper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ddev.administration.v1alpha1.Administration/DeleteWorkspaceDeveloper",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministrationServer).DeleteWorkspaceDeveloper(ctx, req.(*DeleteWorkspaceDeveloperRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Administration_SetDefaultWorkspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDefaultWorkspaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministrationServer).SetDefaultWorkspace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ddev.administration.v1alpha1.Administration/SetDefaultWorkspace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministrationServer).SetDefaultWorkspace(ctx, req.(*SetDefaultWorkspaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Administration_GetDefaultWorkspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDefaultWorkspaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministrationServer).GetDefaultWorkspace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ddev.administration.v1alpha1.Administration/GetDefaultWorkspace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministrationServer).GetDefaultWorkspace(ctx, req.(*GetDefaultWorkspaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Administration_GetWorkspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkspaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministrationServer).GetWorkspace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ddev.administration.v1alpha1.Administration/GetWorkspace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministrationServer).GetWorkspace(ctx, req.(*GetWorkspaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Administration_IsAuthTokenViewer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministrationServer).IsAuthTokenViewer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ddev.administration.v1alpha1.Administration/IsAuthTokenViewer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministrationServer).IsAuthTokenViewer(ctx, req.(*AuthorizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Administration_IsAuthTokenEditor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministrationServer).IsAuthTokenEditor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ddev.administration.v1alpha1.Administration/IsAuthTokenEditor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministrationServer).IsAuthTokenEditor(ctx, req.(*AuthorizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Administration_IsBillingViewer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministrationServer).IsBillingViewer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ddev.administration.v1alpha1.Administration/IsBillingViewer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministrationServer).IsBillingViewer(ctx, req.(*AuthorizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Administration_IsBillingEditor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministrationServer).IsBillingEditor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ddev.administration.v1alpha1.Administration/IsBillingEditor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministrationServer).IsBillingEditor(ctx, req.(*AuthorizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Administration_IsWorkspaceAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministrationServer).IsWorkspaceAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ddev.administration.v1alpha1.Administration/IsWorkspaceAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministrationServer).IsWorkspaceAdmin(ctx, req.(*AuthorizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Administration_IsWorkspaceViewer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministrationServer).IsWorkspaceViewer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ddev.administration.v1alpha1.Administration/IsWorkspaceViewer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministrationServer).IsWorkspaceViewer(ctx, req.(*AuthorizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Administration_IsSiteEditor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministrationServer).IsSiteEditor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ddev.administration.v1alpha1.Administration/IsSiteEditor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministrationServer).IsSiteEditor(ctx, req.(*AuthorizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Administration_IsSiteViewer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministrationServer).IsSiteViewer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ddev.administration.v1alpha1.Administration/IsSiteViewer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministrationServer).IsSiteViewer(ctx, req.(*AuthorizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Administration_IsLogsViewer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministrationServer).IsLogsViewer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ddev.administration.v1alpha1.Administration/IsLogsViewer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministrationServer).IsLogsViewer(ctx, req.(*AuthorizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Administration_IsSiteExecutor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministrationServer).IsSiteExecutor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ddev.administration.v1alpha1.Administration/IsSiteExecutor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministrationServer).IsSiteExecutor(ctx, req.(*AuthorizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Administration_IsDatabaseAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministrationServer).IsDatabaseAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ddev.administration.v1alpha1.Administration/IsDatabaseAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministrationServer).IsDatabaseAdmin(ctx, req.(*AuthorizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Administration_IsDatabaseViewer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministrationServer).IsDatabaseViewer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ddev.administration.v1alpha1.Administration/IsDatabaseViewer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministrationServer).IsDatabaseViewer(ctx, req.(*AuthorizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Administration_IsFileAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministrationServer).IsFileAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ddev.administration.v1alpha1.Administration/IsFileAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministrationServer).IsFileAdmin(ctx, req.(*AuthorizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Administration_IsFileViewer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministrationServer).IsFileViewer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ddev.administration.v1alpha1.Administration/IsFileViewer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministrationServer).IsFileViewer(ctx, req.(*AuthorizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Administration_CreateGithubIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGithubIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministrationServer).CreateGithubIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ddev.administration.v1alpha1.Administration/CreateGithubIntegration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministrationServer).CreateGithubIntegration(ctx, req.(*CreateGithubIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Administration_DeleteGithubIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGithubIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministrationServer).DeleteGithubIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ddev.administration.v1alpha1.Administration/DeleteGithubIntegration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministrationServer).DeleteGithubIntegration(ctx, req.(*DeleteGithubIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Administration_UpdateGithubIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGithubIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministrationServer).UpdateGithubIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ddev.administration.v1alpha1.Administration/UpdateGithubIntegration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministrationServer).UpdateGithubIntegration(ctx, req.(*UpdateGithubIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Administration_ListGithubRepositories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGithubRepositoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministrationServer).ListGithubRepositories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ddev.administration.v1alpha1.Administration/ListGithubRepositories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministrationServer).ListGithubRepositories(ctx, req.(*ListGithubRepositoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Administration_CreateGitlabIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGitlabIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministrationServer).CreateGitlabIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ddev.administration.v1alpha1.Administration/CreateGitlabIntegration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministrationServer).CreateGitlabIntegration(ctx, req.(*CreateGitlabIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Administration_DeleteGitlabIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGitlabIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministrationServer).DeleteGitlabIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ddev.administration.v1alpha1.Administration/DeleteGitlabIntegration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministrationServer).DeleteGitlabIntegration(ctx, req.(*DeleteGitlabIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Administration_ListGitlabIntegrations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGitlabIntegrationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministrationServer).ListGitlabIntegrations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ddev.administration.v1alpha1.Administration/ListGitlabIntegrations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministrationServer).ListGitlabIntegrations(ctx, req.(*ListGitlabIntegrationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Administration_ListGitlabProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGitlabProjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministrationServer).ListGitlabProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ddev.administration.v1alpha1.Administration/ListGitlabProjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministrationServer).ListGitlabProjects(ctx, req.(*ListGitlabProjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Administration_GetGitlabProjectMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGitlabProjectMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministrationServer).GetGitlabProjectMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ddev.administration.v1alpha1.Administration/GetGitlabProjectMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministrationServer).GetGitlabProjectMetadata(ctx, req.(*GetGitlabProjectMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Administration_GetRepositoryMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRepositoryMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministrationServer).GetRepositoryMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ddev.administration.v1alpha1.Administration/GetRepositoryMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministrationServer).GetRepositoryMetadata(ctx, req.(*GetRepositoryMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Administration_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ddev.administration.v1alpha1.Administration",
	HandlerType: (*AdministrationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateToken",
			Handler:    _Administration_CreateToken_Handler,
		},
		{
			MethodName: "CreateRoles",
			Handler:    _Administration_CreateRoles_Handler,
		},
		{
			MethodName: "DescribeRole",
			Handler:    _Administration_DescribeRole_Handler,
		},
		{
			MethodName: "ListRoles",
			Handler:    _Administration_ListRoles_Handler,
		},
		{
			MethodName: "SetCapabilities",
			Handler:    _Administration_SetCapabilities_Handler,
		},
		{
			MethodName: "ListCapabilities",
			Handler:    _Administration_ListCapabilities_Handler,
		},
		{
			MethodName: "ListWorkspaces",
			Handler:    _Administration_ListWorkspaces_Handler,
		},
		{
			MethodName: "AddWorkspaceAdmin",
			Handler:    _Administration_AddWorkspaceAdmin_Handler,
		},
		{
			MethodName: "AddWorkspaceDeveloper",
			Handler:    _Administration_AddWorkspaceDeveloper_Handler,
		},
		{
			MethodName: "DeleteWorkspaceAdmin",
			Handler:    _Administration_DeleteWorkspaceAdmin_Handler,
		},
		{
			MethodName: "DeleteWorkspaceDeveloper",
			Handler:    _Administration_DeleteWorkspaceDeveloper_Handler,
		},
		{
			MethodName: "SetDefaultWorkspace",
			Handler:    _Administration_SetDefaultWorkspace_Handler,
		},
		{
			MethodName: "GetDefaultWorkspace",
			Handler:    _Administration_GetDefaultWorkspace_Handler,
		},
		{
			MethodName: "GetWorkspace",
			Handler:    _Administration_GetWorkspace_Handler,
		},
		{
			MethodName: "IsAuthTokenViewer",
			Handler:    _Administration_IsAuthTokenViewer_Handler,
		},
		{
			MethodName: "IsAuthTokenEditor",
			Handler:    _Administration_IsAuthTokenEditor_Handler,
		},
		{
			MethodName: "IsBillingViewer",
			Handler:    _Administration_IsBillingViewer_Handler,
		},
		{
			MethodName: "IsBillingEditor",
			Handler:    _Administration_IsBillingEditor_Handler,
		},
		{
			MethodName: "IsWorkspaceAdmin",
			Handler:    _Administration_IsWorkspaceAdmin_Handler,
		},
		{
			MethodName: "IsWorkspaceViewer",
			Handler:    _Administration_IsWorkspaceViewer_Handler,
		},
		{
			MethodName: "IsSiteEditor",
			Handler:    _Administration_IsSiteEditor_Handler,
		},
		{
			MethodName: "IsSiteViewer",
			Handler:    _Administration_IsSiteViewer_Handler,
		},
		{
			MethodName: "IsLogsViewer",
			Handler:    _Administration_IsLogsViewer_Handler,
		},
		{
			MethodName: "IsSiteExecutor",
			Handler:    _Administration_IsSiteExecutor_Handler,
		},
		{
			MethodName: "IsDatabaseAdmin",
			Handler:    _Administration_IsDatabaseAdmin_Handler,
		},
		{
			MethodName: "IsDatabaseViewer",
			Handler:    _Administration_IsDatabaseViewer_Handler,
		},
		{
			MethodName: "IsFileAdmin",
			Handler:    _Administration_IsFileAdmin_Handler,
		},
		{
			MethodName: "IsFileViewer",
			Handler:    _Administration_IsFileViewer_Handler,
		},
		{
			MethodName: "CreateGithubIntegration",
			Handler:    _Administration_CreateGithubIntegration_Handler,
		},
		{
			MethodName: "DeleteGithubIntegration",
			Handler:    _Administration_DeleteGithubIntegration_Handler,
		},
		{
			MethodName: "UpdateGithubIntegration",
			Handler:    _Administration_UpdateGithubIntegration_Handler,
		},
		{
			MethodName: "ListGithubRepositories",
			Handler:    _Administration_ListGithubRepositories_Handler,
		},
		{
			MethodName: "CreateGitlabIntegration",
			Handler:    _Administration_CreateGitlabIntegration_Handler,
		},
		{
			MethodName: "DeleteGitlabIntegration",
			Handler:    _Administration_DeleteGitlabIntegration_Handler,
		},
		{
			MethodName: "ListGitlabIntegrations",
			Handler:    _Administration_ListGitlabIntegrations_Handler,
		},
		{
			MethodName: "ListGitlabProjects",
			Handler:    _Administration_ListGitlabProjects_Handler,
		},
		{
			MethodName: "GetGitlabProjectMetadata",
			Handler:    _Administration_GetGitlabProjectMetadata_Handler,
		},
		{
			MethodName: "GetRepositoryMetadata",
			Handler:    _Administration_GetRepositoryMetadata_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "live/administration/v1alpha1/service.proto",
}
