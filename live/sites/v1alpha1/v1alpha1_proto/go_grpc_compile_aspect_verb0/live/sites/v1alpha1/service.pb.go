// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.22.0
// 	protoc        v3.11.0
// source: live/sites/v1alpha1/service.proto

package v1alpha1

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

var File_live_sites_v1alpha1_service_proto protoreflect.FileDescriptor

var file_live_sites_v1alpha1_service_proto_rawDesc = []byte{
	0x0a, 0x21, 0x6c, 0x69, 0x76, 0x65, 0x2f, 0x73, 0x69, 0x74, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x13, 0x64, 0x64, 0x65, 0x76, 0x2e, 0x73, 0x69, 0x74, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a, 0x22, 0x6c, 0x69, 0x76, 0x65, 0x2f, 0x73,
	0x69, 0x74, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x6c, 0x69,
	0x76, 0x65, 0x2f, 0x73, 0x69, 0x74, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x6c, 0x69,
	0x76, 0x65, 0x2f, 0x73, 0x69, 0x74, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2f, 0x73, 0x69, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0xd2, 0x18, 0x0a,
	0x05, 0x53, 0x69, 0x74, 0x65, 0x73, 0x12, 0x5f, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x69, 0x74, 0x65, 0x12, 0x26, 0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e, 0x73, 0x69, 0x74, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x64,
	0x64, 0x65, 0x76, 0x2e, 0x73, 0x69, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x53, 0x69,
	0x74, 0x65, 0x12, 0x23, 0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e, 0x73, 0x69, 0x74, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x69, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e, 0x73,
	0x69, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x5a, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x69, 0x74, 0x65, 0x73, 0x12, 0x24, 0x2e, 0x64,
	0x64, 0x65, 0x76, 0x2e, 0x73, 0x69, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x25, 0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e, 0x73, 0x69, 0x74, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x69, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x0a, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x69, 0x74, 0x65, 0x12, 0x26, 0x2e, 0x64, 0x64, 0x65, 0x76,
	0x2e, 0x73, 0x69, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x27, 0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e, 0x73, 0x69, 0x74, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x69,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x0a,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x69, 0x74, 0x65, 0x12, 0x26, 0x2e, 0x64, 0x64, 0x65,
	0x76, 0x2e, 0x73, 0x69, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x27, 0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e, 0x73, 0x69, 0x74, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x60, 0x0a,
	0x0d, 0x53, 0x69, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x24,
	0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e, 0x73, 0x69, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x69, 0x74, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e, 0x73, 0x69, 0x74, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x69, 0x74, 0x65, 0x4c,
	0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12,
	0x66, 0x0a, 0x0f, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x12, 0x26, 0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e, 0x73, 0x69, 0x74, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c,
	0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x64, 0x64, 0x65,
	0x76, 0x2e, 0x73, 0x69, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x63, 0x0a, 0x0e, 0x4d, 0x79, 0x73, 0x71, 0x6c,
	0x4c, 0x6f, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x25, 0x2e, 0x64, 0x64, 0x65, 0x76,
	0x2e, 0x73, 0x69, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x4d, 0x79, 0x73, 0x71, 0x6c, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x26, 0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e, 0x73, 0x69, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x79, 0x73, 0x71, 0x6c, 0x4c, 0x6f, 0x67, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x63, 0x0a, 0x0e,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x4c, 0x6f, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x25,
	0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e, 0x73, 0x69, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e, 0x73, 0x69, 0x74,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30,
	0x01, 0x12, 0x63, 0x0a, 0x0e, 0x53, 0x69, 0x74, 0x65, 0x45, 0x78, 0x65, 0x63, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x12, 0x24, 0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e, 0x73, 0x69, 0x74, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x69, 0x74, 0x65, 0x45, 0x78,
	0x65, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x64, 0x64, 0x65, 0x76,
	0x2e, 0x73, 0x69, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x53, 0x69, 0x74, 0x65, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x54, 0x0a, 0x09, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x53,
	0x69, 0x74, 0x65, 0x12, 0x21, 0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e, 0x73, 0x69, 0x74, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e, 0x73, 0x69,
	0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6c, 0x6f,
	0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x0d,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x12, 0x29, 0x2e,
	0x64, 0x64, 0x65, 0x76, 0x2e, 0x73, 0x69, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6c, 0x6f, 0x6e,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e,
	0x73, 0x69, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x86, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6c, 0x6f, 0x6e, 0x65, 0x53, 0x69, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x33, 0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e, 0x73, 0x69, 0x74, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f,
	0x6e, 0x65, 0x53, 0x69, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e, 0x73,
	0x69, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x53, 0x69, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x74, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x73, 0x46, 0x6f, 0x72,
	0x53, 0x69, 0x74, 0x65, 0x12, 0x2d, 0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e, 0x73, 0x69, 0x74, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6c, 0x6f, 0x6e, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x53, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e, 0x73, 0x69, 0x74, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c,
	0x6f, 0x6e, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x53, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x6c, 0x6f, 0x6e, 0x65, 0x12, 0x27, 0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e, 0x73, 0x69, 0x74, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e,
	0x64, 0x64, 0x65, 0x76, 0x2e, 0x73, 0x69, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x0e, 0x42, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x2a, 0x2e, 0x64, 0x64,
	0x65, 0x76, 0x2e, 0x73, 0x69, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e, 0x73,
	0x69, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6e, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x2b, 0x2e, 0x64, 0x64, 0x65, 0x76,
	0x2e, 0x73, 0x69, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e, 0x73, 0x69,
	0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x77, 0x0a, 0x12, 0x50, 0x75, 0x73, 0x68, 0x44, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x12, 0x2e, 0x2e, 0x64,
	0x64, 0x65, 0x76, 0x2e, 0x73, 0x69, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x42,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x64,
	0x64, 0x65, 0x76, 0x2e, 0x73, 0x69, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x42,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x7f, 0x0a, 0x18, 0x50, 0x75, 0x73, 0x68, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x42,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x2e, 0x2e, 0x64, 0x64,
	0x65, 0x76, 0x2e, 0x73, 0x69, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x42, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x64, 0x64,
	0x65, 0x76, 0x2e, 0x73, 0x69, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x42, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01,
	0x12, 0x77, 0x0a, 0x12, 0x50, 0x75, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x12, 0x2e, 0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e, 0x73, 0x69,
	0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x75, 0x6c,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e, 0x73, 0x69,
	0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x75, 0x6c,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7f, 0x0a, 0x18, 0x50, 0x75, 0x6c,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x2e, 0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e, 0x73, 0x69, 0x74,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x75, 0x6c, 0x6c,
	0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e, 0x73, 0x69, 0x74,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x75, 0x6c, 0x6c,
	0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x7a, 0x0a, 0x13, 0x4c, 0x69,
	0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x73, 0x12, 0x2f, 0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e, 0x73, 0x69, 0x74, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x30, 0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e, 0x73, 0x69, 0x74, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x0b, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x27, 0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e, 0x73, 0x69, 0x74,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28,
	0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e, 0x73, 0x69, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x0c, 0x52, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x28, 0x2e, 0x64, 0x64, 0x65,
	0x76, 0x2e, 0x73, 0x69, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e, 0x73, 0x69, 0x74, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x6b, 0x0a, 0x0e, 0x50, 0x75, 0x73, 0x68, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x12, 0x2a, 0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e, 0x73, 0x69, 0x74, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x46, 0x69,
	0x6c, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2b, 0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e, 0x73, 0x69, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x73,
	0x0a, 0x14, 0x50, 0x75, 0x73, 0x68, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x2a, 0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e, 0x73, 0x69,
	0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x75, 0x73,
	0x68, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e, 0x73, 0x69, 0x74, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x46, 0x69, 0x6c,
	0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x28, 0x01, 0x12, 0x73, 0x0a, 0x14, 0x50, 0x75, 0x6c, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x42,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x2a, 0x2e, 0x64, 0x64,
	0x65, 0x76, 0x2e, 0x73, 0x69, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e, 0x73,
	0x69, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x75,
	0x6c, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x77, 0x0a, 0x12, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x12, 0x2e,
	0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e, 0x73, 0x69, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f,
	0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e, 0x73, 0x69, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x6e, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x73, 0x12, 0x2b, 0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e, 0x73, 0x69, 0x74, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46,
	0x69, 0x6c, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2c, 0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e, 0x73, 0x69, 0x74, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65,
	0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x42, 0x60, 0x0a, 0x1c, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x64, 0x65, 0x76, 0x2e, 0x6c, 0x69,
	0x76, 0x65, 0x2e, 0x73, 0x69, 0x74, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x42, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x72,
	0x75, 0x64, 0x2f, 0x64, 0x64, 0x65, 0x76, 0x2d, 0x61, 0x70, 0x69, 0x73, 0x2d, 0x67, 0x6f, 0x2f,
	0x6c, 0x69, 0x76, 0x65, 0x2f, 0x73, 0x69, 0x74, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_live_sites_v1alpha1_service_proto_goTypes = []interface{}{
	(*CreateSiteRequest)(nil),               // 0: ddev.sites.v1alpha1.CreateSiteRequest
	(*GetSiteRequest)(nil),                  // 1: ddev.sites.v1alpha1.GetSiteRequest
	(*ListSiteRequest)(nil),                 // 2: ddev.sites.v1alpha1.ListSiteRequest
	(*UpdateSiteRequest)(nil),               // 3: ddev.sites.v1alpha1.UpdateSiteRequest
	(*DeleteSiteRequest)(nil),               // 4: ddev.sites.v1alpha1.DeleteSiteRequest
	(*SiteLogsRequest)(nil),                 // 5: ddev.sites.v1alpha1.SiteLogsRequest
	(*AccessLogsRequest)(nil),               // 6: ddev.sites.v1alpha1.AccessLogsRequest
	(*MysqlLogsRequest)(nil),                // 7: ddev.sites.v1alpha1.MysqlLogsRequest
	(*BuildLogsRequest)(nil),                // 8: ddev.sites.v1alpha1.BuildLogsRequest
	(*SiteExecRequest)(nil),                 // 9: ddev.sites.v1alpha1.SiteExecRequest
	(*CloneRequest)(nil),                    // 10: ddev.sites.v1alpha1.CloneRequest
	(*DescribeCloneRequest)(nil),            // 11: ddev.sites.v1alpha1.DescribeCloneRequest
	(*ListCloneSiteOperationsRequest)(nil),  // 12: ddev.sites.v1alpha1.ListCloneSiteOperationsRequest
	(*ListClonesForSiteRequest)(nil),        // 13: ddev.sites.v1alpha1.ListClonesForSiteRequest
	(*DeleteCloneRequest)(nil),              // 14: ddev.sites.v1alpha1.DeleteCloneRequest
	(*BackupDatabaseRequest)(nil),           // 15: ddev.sites.v1alpha1.BackupDatabaseRequest
	(*RestoreDatabaseRequest)(nil),          // 16: ddev.sites.v1alpha1.RestoreDatabaseRequest
	(*PushDatabaseBackupRequest)(nil),       // 17: ddev.sites.v1alpha1.PushDatabaseBackupRequest
	(*PullDatabaseBackupRequest)(nil),       // 18: ddev.sites.v1alpha1.PullDatabaseBackupRequest
	(*ListDatabaseBackupsRequest)(nil),      // 19: ddev.sites.v1alpha1.ListDatabaseBackupsRequest
	(*BackupFilesRequest)(nil),              // 20: ddev.sites.v1alpha1.BackupFilesRequest
	(*RestoreFilesRequest)(nil),             // 21: ddev.sites.v1alpha1.RestoreFilesRequest
	(*PushFileBackupRequest)(nil),           // 22: ddev.sites.v1alpha1.PushFileBackupRequest
	(*PullFileBackupRequest)(nil),           // 23: ddev.sites.v1alpha1.PullFileBackupRequest
	(*DescribeFileBackupRequest)(nil),       // 24: ddev.sites.v1alpha1.DescribeFileBackupRequest
	(*ListFileBackupsRequest)(nil),          // 25: ddev.sites.v1alpha1.ListFileBackupsRequest
	(*CreateSiteResponse)(nil),              // 26: ddev.sites.v1alpha1.CreateSiteResponse
	(*GetSiteResponse)(nil),                 // 27: ddev.sites.v1alpha1.GetSiteResponse
	(*ListSiteResponse)(nil),                // 28: ddev.sites.v1alpha1.ListSiteResponse
	(*UpdateSiteResponse)(nil),              // 29: ddev.sites.v1alpha1.UpdateSiteResponse
	(*DeleteSiteResponse)(nil),              // 30: ddev.sites.v1alpha1.DeleteSiteResponse
	(*SiteLogsResponse)(nil),                // 31: ddev.sites.v1alpha1.SiteLogsResponse
	(*AccessLogsResponse)(nil),              // 32: ddev.sites.v1alpha1.AccessLogsResponse
	(*MysqlLogsResponse)(nil),               // 33: ddev.sites.v1alpha1.MysqlLogsResponse
	(*BuildLogsResponse)(nil),               // 34: ddev.sites.v1alpha1.BuildLogsResponse
	(*SiteExecResponse)(nil),                // 35: ddev.sites.v1alpha1.SiteExecResponse
	(*CloneResponse)(nil),                   // 36: ddev.sites.v1alpha1.CloneResponse
	(*DescribeCloneResponse)(nil),           // 37: ddev.sites.v1alpha1.DescribeCloneResponse
	(*ListCloneSiteOperationsResponse)(nil), // 38: ddev.sites.v1alpha1.ListCloneSiteOperationsResponse
	(*ListClonesForSiteResponse)(nil),       // 39: ddev.sites.v1alpha1.ListClonesForSiteResponse
	(*DeleteCloneResponse)(nil),             // 40: ddev.sites.v1alpha1.DeleteCloneResponse
	(*BackupDatabaseResponse)(nil),          // 41: ddev.sites.v1alpha1.BackupDatabaseResponse
	(*RestoreDatabaseResponse)(nil),         // 42: ddev.sites.v1alpha1.RestoreDatabaseResponse
	(*PushDatabaseBackupResponse)(nil),      // 43: ddev.sites.v1alpha1.PushDatabaseBackupResponse
	(*PullDatabaseBackupResponse)(nil),      // 44: ddev.sites.v1alpha1.PullDatabaseBackupResponse
	(*ListDatabaseBackupsResponse)(nil),     // 45: ddev.sites.v1alpha1.ListDatabaseBackupsResponse
	(*BackupFilesResponse)(nil),             // 46: ddev.sites.v1alpha1.BackupFilesResponse
	(*RestoreFilesResponse)(nil),            // 47: ddev.sites.v1alpha1.RestoreFilesResponse
	(*PushFileBackupResponse)(nil),          // 48: ddev.sites.v1alpha1.PushFileBackupResponse
	(*PullFileBackupResponse)(nil),          // 49: ddev.sites.v1alpha1.PullFileBackupResponse
	(*DescribeFileBackupResponse)(nil),      // 50: ddev.sites.v1alpha1.DescribeFileBackupResponse
	(*ListFileBackupsResponse)(nil),         // 51: ddev.sites.v1alpha1.ListFileBackupsResponse
}
var file_live_sites_v1alpha1_service_proto_depIdxs = []int32{
	0,  // 0: ddev.sites.v1alpha1.Sites.CreateSite:input_type -> ddev.sites.v1alpha1.CreateSiteRequest
	1,  // 1: ddev.sites.v1alpha1.Sites.GetSite:input_type -> ddev.sites.v1alpha1.GetSiteRequest
	2,  // 2: ddev.sites.v1alpha1.Sites.ListSites:input_type -> ddev.sites.v1alpha1.ListSiteRequest
	3,  // 3: ddev.sites.v1alpha1.Sites.UpdateSite:input_type -> ddev.sites.v1alpha1.UpdateSiteRequest
	4,  // 4: ddev.sites.v1alpha1.Sites.DeleteSite:input_type -> ddev.sites.v1alpha1.DeleteSiteRequest
	5,  // 5: ddev.sites.v1alpha1.Sites.SiteLogStream:input_type -> ddev.sites.v1alpha1.SiteLogsRequest
	6,  // 6: ddev.sites.v1alpha1.Sites.AccessLogStream:input_type -> ddev.sites.v1alpha1.AccessLogsRequest
	7,  // 7: ddev.sites.v1alpha1.Sites.MysqlLogStream:input_type -> ddev.sites.v1alpha1.MysqlLogsRequest
	8,  // 8: ddev.sites.v1alpha1.Sites.BuildLogStream:input_type -> ddev.sites.v1alpha1.BuildLogsRequest
	9,  // 9: ddev.sites.v1alpha1.Sites.SiteExecStream:input_type -> ddev.sites.v1alpha1.SiteExecRequest
	10, // 10: ddev.sites.v1alpha1.Sites.CloneSite:input_type -> ddev.sites.v1alpha1.CloneRequest
	11, // 11: ddev.sites.v1alpha1.Sites.DescribeClone:input_type -> ddev.sites.v1alpha1.DescribeCloneRequest
	12, // 12: ddev.sites.v1alpha1.Sites.ListCloneSiteOperations:input_type -> ddev.sites.v1alpha1.ListCloneSiteOperationsRequest
	13, // 13: ddev.sites.v1alpha1.Sites.ListClonesForSite:input_type -> ddev.sites.v1alpha1.ListClonesForSiteRequest
	14, // 14: ddev.sites.v1alpha1.Sites.DeleteClone:input_type -> ddev.sites.v1alpha1.DeleteCloneRequest
	15, // 15: ddev.sites.v1alpha1.Sites.BackupDatabase:input_type -> ddev.sites.v1alpha1.BackupDatabaseRequest
	16, // 16: ddev.sites.v1alpha1.Sites.RestoreDatabase:input_type -> ddev.sites.v1alpha1.RestoreDatabaseRequest
	17, // 17: ddev.sites.v1alpha1.Sites.PushDatabaseBackup:input_type -> ddev.sites.v1alpha1.PushDatabaseBackupRequest
	17, // 18: ddev.sites.v1alpha1.Sites.PushDatabaseBackupStream:input_type -> ddev.sites.v1alpha1.PushDatabaseBackupRequest
	18, // 19: ddev.sites.v1alpha1.Sites.PullDatabaseBackup:input_type -> ddev.sites.v1alpha1.PullDatabaseBackupRequest
	18, // 20: ddev.sites.v1alpha1.Sites.PullDatabaseBackupStream:input_type -> ddev.sites.v1alpha1.PullDatabaseBackupRequest
	19, // 21: ddev.sites.v1alpha1.Sites.ListDatabaseBackups:input_type -> ddev.sites.v1alpha1.ListDatabaseBackupsRequest
	20, // 22: ddev.sites.v1alpha1.Sites.BackupFiles:input_type -> ddev.sites.v1alpha1.BackupFilesRequest
	21, // 23: ddev.sites.v1alpha1.Sites.RestoreFiles:input_type -> ddev.sites.v1alpha1.RestoreFilesRequest
	22, // 24: ddev.sites.v1alpha1.Sites.PushFileBackup:input_type -> ddev.sites.v1alpha1.PushFileBackupRequest
	22, // 25: ddev.sites.v1alpha1.Sites.PushFileBackupStream:input_type -> ddev.sites.v1alpha1.PushFileBackupRequest
	23, // 26: ddev.sites.v1alpha1.Sites.PullFileBackupStream:input_type -> ddev.sites.v1alpha1.PullFileBackupRequest
	24, // 27: ddev.sites.v1alpha1.Sites.DescribeFileBackup:input_type -> ddev.sites.v1alpha1.DescribeFileBackupRequest
	25, // 28: ddev.sites.v1alpha1.Sites.ListFileBackups:input_type -> ddev.sites.v1alpha1.ListFileBackupsRequest
	26, // 29: ddev.sites.v1alpha1.Sites.CreateSite:output_type -> ddev.sites.v1alpha1.CreateSiteResponse
	27, // 30: ddev.sites.v1alpha1.Sites.GetSite:output_type -> ddev.sites.v1alpha1.GetSiteResponse
	28, // 31: ddev.sites.v1alpha1.Sites.ListSites:output_type -> ddev.sites.v1alpha1.ListSiteResponse
	29, // 32: ddev.sites.v1alpha1.Sites.UpdateSite:output_type -> ddev.sites.v1alpha1.UpdateSiteResponse
	30, // 33: ddev.sites.v1alpha1.Sites.DeleteSite:output_type -> ddev.sites.v1alpha1.DeleteSiteResponse
	31, // 34: ddev.sites.v1alpha1.Sites.SiteLogStream:output_type -> ddev.sites.v1alpha1.SiteLogsResponse
	32, // 35: ddev.sites.v1alpha1.Sites.AccessLogStream:output_type -> ddev.sites.v1alpha1.AccessLogsResponse
	33, // 36: ddev.sites.v1alpha1.Sites.MysqlLogStream:output_type -> ddev.sites.v1alpha1.MysqlLogsResponse
	34, // 37: ddev.sites.v1alpha1.Sites.BuildLogStream:output_type -> ddev.sites.v1alpha1.BuildLogsResponse
	35, // 38: ddev.sites.v1alpha1.Sites.SiteExecStream:output_type -> ddev.sites.v1alpha1.SiteExecResponse
	36, // 39: ddev.sites.v1alpha1.Sites.CloneSite:output_type -> ddev.sites.v1alpha1.CloneResponse
	37, // 40: ddev.sites.v1alpha1.Sites.DescribeClone:output_type -> ddev.sites.v1alpha1.DescribeCloneResponse
	38, // 41: ddev.sites.v1alpha1.Sites.ListCloneSiteOperations:output_type -> ddev.sites.v1alpha1.ListCloneSiteOperationsResponse
	39, // 42: ddev.sites.v1alpha1.Sites.ListClonesForSite:output_type -> ddev.sites.v1alpha1.ListClonesForSiteResponse
	40, // 43: ddev.sites.v1alpha1.Sites.DeleteClone:output_type -> ddev.sites.v1alpha1.DeleteCloneResponse
	41, // 44: ddev.sites.v1alpha1.Sites.BackupDatabase:output_type -> ddev.sites.v1alpha1.BackupDatabaseResponse
	42, // 45: ddev.sites.v1alpha1.Sites.RestoreDatabase:output_type -> ddev.sites.v1alpha1.RestoreDatabaseResponse
	43, // 46: ddev.sites.v1alpha1.Sites.PushDatabaseBackup:output_type -> ddev.sites.v1alpha1.PushDatabaseBackupResponse
	43, // 47: ddev.sites.v1alpha1.Sites.PushDatabaseBackupStream:output_type -> ddev.sites.v1alpha1.PushDatabaseBackupResponse
	44, // 48: ddev.sites.v1alpha1.Sites.PullDatabaseBackup:output_type -> ddev.sites.v1alpha1.PullDatabaseBackupResponse
	44, // 49: ddev.sites.v1alpha1.Sites.PullDatabaseBackupStream:output_type -> ddev.sites.v1alpha1.PullDatabaseBackupResponse
	45, // 50: ddev.sites.v1alpha1.Sites.ListDatabaseBackups:output_type -> ddev.sites.v1alpha1.ListDatabaseBackupsResponse
	46, // 51: ddev.sites.v1alpha1.Sites.BackupFiles:output_type -> ddev.sites.v1alpha1.BackupFilesResponse
	47, // 52: ddev.sites.v1alpha1.Sites.RestoreFiles:output_type -> ddev.sites.v1alpha1.RestoreFilesResponse
	48, // 53: ddev.sites.v1alpha1.Sites.PushFileBackup:output_type -> ddev.sites.v1alpha1.PushFileBackupResponse
	48, // 54: ddev.sites.v1alpha1.Sites.PushFileBackupStream:output_type -> ddev.sites.v1alpha1.PushFileBackupResponse
	49, // 55: ddev.sites.v1alpha1.Sites.PullFileBackupStream:output_type -> ddev.sites.v1alpha1.PullFileBackupResponse
	50, // 56: ddev.sites.v1alpha1.Sites.DescribeFileBackup:output_type -> ddev.sites.v1alpha1.DescribeFileBackupResponse
	51, // 57: ddev.sites.v1alpha1.Sites.ListFileBackups:output_type -> ddev.sites.v1alpha1.ListFileBackupsResponse
	29, // [29:58] is the sub-list for method output_type
	0,  // [0:29] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_live_sites_v1alpha1_service_proto_init() }
func file_live_sites_v1alpha1_service_proto_init() {
	if File_live_sites_v1alpha1_service_proto != nil {
		return
	}
	file_live_sites_v1alpha1_database_proto_init()
	file_live_sites_v1alpha1_file_proto_init()
	file_live_sites_v1alpha1_site_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_live_sites_v1alpha1_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_live_sites_v1alpha1_service_proto_goTypes,
		DependencyIndexes: file_live_sites_v1alpha1_service_proto_depIdxs,
	}.Build()
	File_live_sites_v1alpha1_service_proto = out.File
	file_live_sites_v1alpha1_service_proto_rawDesc = nil
	file_live_sites_v1alpha1_service_proto_goTypes = nil
	file_live_sites_v1alpha1_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SitesClient is the client API for Sites service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SitesClient interface {
	CreateSite(ctx context.Context, in *CreateSiteRequest, opts ...grpc.CallOption) (*CreateSiteResponse, error)
	GetSite(ctx context.Context, in *GetSiteRequest, opts ...grpc.CallOption) (*GetSiteResponse, error)
	ListSites(ctx context.Context, in *ListSiteRequest, opts ...grpc.CallOption) (*ListSiteResponse, error)
	UpdateSite(ctx context.Context, in *UpdateSiteRequest, opts ...grpc.CallOption) (*UpdateSiteResponse, error)
	DeleteSite(ctx context.Context, in *DeleteSiteRequest, opts ...grpc.CallOption) (*DeleteSiteResponse, error)
	SiteLogStream(ctx context.Context, in *SiteLogsRequest, opts ...grpc.CallOption) (Sites_SiteLogStreamClient, error)
	AccessLogStream(ctx context.Context, in *AccessLogsRequest, opts ...grpc.CallOption) (Sites_AccessLogStreamClient, error)
	MysqlLogStream(ctx context.Context, in *MysqlLogsRequest, opts ...grpc.CallOption) (Sites_MysqlLogStreamClient, error)
	BuildLogStream(ctx context.Context, in *BuildLogsRequest, opts ...grpc.CallOption) (Sites_BuildLogStreamClient, error)
	SiteExecStream(ctx context.Context, opts ...grpc.CallOption) (Sites_SiteExecStreamClient, error)
	CloneSite(ctx context.Context, in *CloneRequest, opts ...grpc.CallOption) (*CloneResponse, error)
	DescribeClone(ctx context.Context, in *DescribeCloneRequest, opts ...grpc.CallOption) (*DescribeCloneResponse, error)
	ListCloneSiteOperations(ctx context.Context, in *ListCloneSiteOperationsRequest, opts ...grpc.CallOption) (*ListCloneSiteOperationsResponse, error)
	ListClonesForSite(ctx context.Context, in *ListClonesForSiteRequest, opts ...grpc.CallOption) (*ListClonesForSiteResponse, error)
	DeleteClone(ctx context.Context, in *DeleteCloneRequest, opts ...grpc.CallOption) (*DeleteCloneResponse, error)
	BackupDatabase(ctx context.Context, in *BackupDatabaseRequest, opts ...grpc.CallOption) (*BackupDatabaseResponse, error)
	RestoreDatabase(ctx context.Context, in *RestoreDatabaseRequest, opts ...grpc.CallOption) (*RestoreDatabaseResponse, error)
	PushDatabaseBackup(ctx context.Context, in *PushDatabaseBackupRequest, opts ...grpc.CallOption) (*PushDatabaseBackupResponse, error)
	PushDatabaseBackupStream(ctx context.Context, opts ...grpc.CallOption) (Sites_PushDatabaseBackupStreamClient, error)
	PullDatabaseBackup(ctx context.Context, in *PullDatabaseBackupRequest, opts ...grpc.CallOption) (*PullDatabaseBackupResponse, error)
	PullDatabaseBackupStream(ctx context.Context, in *PullDatabaseBackupRequest, opts ...grpc.CallOption) (Sites_PullDatabaseBackupStreamClient, error)
	ListDatabaseBackups(ctx context.Context, in *ListDatabaseBackupsRequest, opts ...grpc.CallOption) (*ListDatabaseBackupsResponse, error)
	BackupFiles(ctx context.Context, in *BackupFilesRequest, opts ...grpc.CallOption) (*BackupFilesResponse, error)
	RestoreFiles(ctx context.Context, in *RestoreFilesRequest, opts ...grpc.CallOption) (*RestoreFilesResponse, error)
	PushFileBackup(ctx context.Context, in *PushFileBackupRequest, opts ...grpc.CallOption) (*PushFileBackupResponse, error)
	PushFileBackupStream(ctx context.Context, opts ...grpc.CallOption) (Sites_PushFileBackupStreamClient, error)
	PullFileBackupStream(ctx context.Context, in *PullFileBackupRequest, opts ...grpc.CallOption) (Sites_PullFileBackupStreamClient, error)
	DescribeFileBackup(ctx context.Context, in *DescribeFileBackupRequest, opts ...grpc.CallOption) (*DescribeFileBackupResponse, error)
	ListFileBackups(ctx context.Context, in *ListFileBackupsRequest, opts ...grpc.CallOption) (*ListFileBackupsResponse, error)
}

type sitesClient struct {
	cc grpc.ClientConnInterface
}

func NewSitesClient(cc grpc.ClientConnInterface) SitesClient {
	return &sitesClient{cc}
}

func (c *sitesClient) CreateSite(ctx context.Context, in *CreateSiteRequest, opts ...grpc.CallOption) (*CreateSiteResponse, error) {
	out := new(CreateSiteResponse)
	err := c.cc.Invoke(ctx, "/ddev.sites.v1alpha1.Sites/CreateSite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sitesClient) GetSite(ctx context.Context, in *GetSiteRequest, opts ...grpc.CallOption) (*GetSiteResponse, error) {
	out := new(GetSiteResponse)
	err := c.cc.Invoke(ctx, "/ddev.sites.v1alpha1.Sites/GetSite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sitesClient) ListSites(ctx context.Context, in *ListSiteRequest, opts ...grpc.CallOption) (*ListSiteResponse, error) {
	out := new(ListSiteResponse)
	err := c.cc.Invoke(ctx, "/ddev.sites.v1alpha1.Sites/ListSites", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sitesClient) UpdateSite(ctx context.Context, in *UpdateSiteRequest, opts ...grpc.CallOption) (*UpdateSiteResponse, error) {
	out := new(UpdateSiteResponse)
	err := c.cc.Invoke(ctx, "/ddev.sites.v1alpha1.Sites/UpdateSite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sitesClient) DeleteSite(ctx context.Context, in *DeleteSiteRequest, opts ...grpc.CallOption) (*DeleteSiteResponse, error) {
	out := new(DeleteSiteResponse)
	err := c.cc.Invoke(ctx, "/ddev.sites.v1alpha1.Sites/DeleteSite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sitesClient) SiteLogStream(ctx context.Context, in *SiteLogsRequest, opts ...grpc.CallOption) (Sites_SiteLogStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Sites_serviceDesc.Streams[0], "/ddev.sites.v1alpha1.Sites/SiteLogStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &sitesSiteLogStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Sites_SiteLogStreamClient interface {
	Recv() (*SiteLogsResponse, error)
	grpc.ClientStream
}

type sitesSiteLogStreamClient struct {
	grpc.ClientStream
}

func (x *sitesSiteLogStreamClient) Recv() (*SiteLogsResponse, error) {
	m := new(SiteLogsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sitesClient) AccessLogStream(ctx context.Context, in *AccessLogsRequest, opts ...grpc.CallOption) (Sites_AccessLogStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Sites_serviceDesc.Streams[1], "/ddev.sites.v1alpha1.Sites/AccessLogStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &sitesAccessLogStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Sites_AccessLogStreamClient interface {
	Recv() (*AccessLogsResponse, error)
	grpc.ClientStream
}

type sitesAccessLogStreamClient struct {
	grpc.ClientStream
}

func (x *sitesAccessLogStreamClient) Recv() (*AccessLogsResponse, error) {
	m := new(AccessLogsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sitesClient) MysqlLogStream(ctx context.Context, in *MysqlLogsRequest, opts ...grpc.CallOption) (Sites_MysqlLogStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Sites_serviceDesc.Streams[2], "/ddev.sites.v1alpha1.Sites/MysqlLogStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &sitesMysqlLogStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Sites_MysqlLogStreamClient interface {
	Recv() (*MysqlLogsResponse, error)
	grpc.ClientStream
}

type sitesMysqlLogStreamClient struct {
	grpc.ClientStream
}

func (x *sitesMysqlLogStreamClient) Recv() (*MysqlLogsResponse, error) {
	m := new(MysqlLogsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sitesClient) BuildLogStream(ctx context.Context, in *BuildLogsRequest, opts ...grpc.CallOption) (Sites_BuildLogStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Sites_serviceDesc.Streams[3], "/ddev.sites.v1alpha1.Sites/BuildLogStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &sitesBuildLogStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Sites_BuildLogStreamClient interface {
	Recv() (*BuildLogsResponse, error)
	grpc.ClientStream
}

type sitesBuildLogStreamClient struct {
	grpc.ClientStream
}

func (x *sitesBuildLogStreamClient) Recv() (*BuildLogsResponse, error) {
	m := new(BuildLogsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sitesClient) SiteExecStream(ctx context.Context, opts ...grpc.CallOption) (Sites_SiteExecStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Sites_serviceDesc.Streams[4], "/ddev.sites.v1alpha1.Sites/SiteExecStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &sitesSiteExecStreamClient{stream}
	return x, nil
}

type Sites_SiteExecStreamClient interface {
	Send(*SiteExecRequest) error
	Recv() (*SiteExecResponse, error)
	grpc.ClientStream
}

type sitesSiteExecStreamClient struct {
	grpc.ClientStream
}

func (x *sitesSiteExecStreamClient) Send(m *SiteExecRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sitesSiteExecStreamClient) Recv() (*SiteExecResponse, error) {
	m := new(SiteExecResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sitesClient) CloneSite(ctx context.Context, in *CloneRequest, opts ...grpc.CallOption) (*CloneResponse, error) {
	out := new(CloneResponse)
	err := c.cc.Invoke(ctx, "/ddev.sites.v1alpha1.Sites/CloneSite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sitesClient) DescribeClone(ctx context.Context, in *DescribeCloneRequest, opts ...grpc.CallOption) (*DescribeCloneResponse, error) {
	out := new(DescribeCloneResponse)
	err := c.cc.Invoke(ctx, "/ddev.sites.v1alpha1.Sites/DescribeClone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sitesClient) ListCloneSiteOperations(ctx context.Context, in *ListCloneSiteOperationsRequest, opts ...grpc.CallOption) (*ListCloneSiteOperationsResponse, error) {
	out := new(ListCloneSiteOperationsResponse)
	err := c.cc.Invoke(ctx, "/ddev.sites.v1alpha1.Sites/ListCloneSiteOperations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sitesClient) ListClonesForSite(ctx context.Context, in *ListClonesForSiteRequest, opts ...grpc.CallOption) (*ListClonesForSiteResponse, error) {
	out := new(ListClonesForSiteResponse)
	err := c.cc.Invoke(ctx, "/ddev.sites.v1alpha1.Sites/ListClonesForSite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sitesClient) DeleteClone(ctx context.Context, in *DeleteCloneRequest, opts ...grpc.CallOption) (*DeleteCloneResponse, error) {
	out := new(DeleteCloneResponse)
	err := c.cc.Invoke(ctx, "/ddev.sites.v1alpha1.Sites/DeleteClone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sitesClient) BackupDatabase(ctx context.Context, in *BackupDatabaseRequest, opts ...grpc.CallOption) (*BackupDatabaseResponse, error) {
	out := new(BackupDatabaseResponse)
	err := c.cc.Invoke(ctx, "/ddev.sites.v1alpha1.Sites/BackupDatabase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sitesClient) RestoreDatabase(ctx context.Context, in *RestoreDatabaseRequest, opts ...grpc.CallOption) (*RestoreDatabaseResponse, error) {
	out := new(RestoreDatabaseResponse)
	err := c.cc.Invoke(ctx, "/ddev.sites.v1alpha1.Sites/RestoreDatabase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sitesClient) PushDatabaseBackup(ctx context.Context, in *PushDatabaseBackupRequest, opts ...grpc.CallOption) (*PushDatabaseBackupResponse, error) {
	out := new(PushDatabaseBackupResponse)
	err := c.cc.Invoke(ctx, "/ddev.sites.v1alpha1.Sites/PushDatabaseBackup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sitesClient) PushDatabaseBackupStream(ctx context.Context, opts ...grpc.CallOption) (Sites_PushDatabaseBackupStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Sites_serviceDesc.Streams[5], "/ddev.sites.v1alpha1.Sites/PushDatabaseBackupStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &sitesPushDatabaseBackupStreamClient{stream}
	return x, nil
}

type Sites_PushDatabaseBackupStreamClient interface {
	Send(*PushDatabaseBackupRequest) error
	CloseAndRecv() (*PushDatabaseBackupResponse, error)
	grpc.ClientStream
}

type sitesPushDatabaseBackupStreamClient struct {
	grpc.ClientStream
}

func (x *sitesPushDatabaseBackupStreamClient) Send(m *PushDatabaseBackupRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sitesPushDatabaseBackupStreamClient) CloseAndRecv() (*PushDatabaseBackupResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(PushDatabaseBackupResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sitesClient) PullDatabaseBackup(ctx context.Context, in *PullDatabaseBackupRequest, opts ...grpc.CallOption) (*PullDatabaseBackupResponse, error) {
	out := new(PullDatabaseBackupResponse)
	err := c.cc.Invoke(ctx, "/ddev.sites.v1alpha1.Sites/PullDatabaseBackup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sitesClient) PullDatabaseBackupStream(ctx context.Context, in *PullDatabaseBackupRequest, opts ...grpc.CallOption) (Sites_PullDatabaseBackupStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Sites_serviceDesc.Streams[6], "/ddev.sites.v1alpha1.Sites/PullDatabaseBackupStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &sitesPullDatabaseBackupStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Sites_PullDatabaseBackupStreamClient interface {
	Recv() (*PullDatabaseBackupResponse, error)
	grpc.ClientStream
}

type sitesPullDatabaseBackupStreamClient struct {
	grpc.ClientStream
}

func (x *sitesPullDatabaseBackupStreamClient) Recv() (*PullDatabaseBackupResponse, error) {
	m := new(PullDatabaseBackupResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sitesClient) ListDatabaseBackups(ctx context.Context, in *ListDatabaseBackupsRequest, opts ...grpc.CallOption) (*ListDatabaseBackupsResponse, error) {
	out := new(ListDatabaseBackupsResponse)
	err := c.cc.Invoke(ctx, "/ddev.sites.v1alpha1.Sites/ListDatabaseBackups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sitesClient) BackupFiles(ctx context.Context, in *BackupFilesRequest, opts ...grpc.CallOption) (*BackupFilesResponse, error) {
	out := new(BackupFilesResponse)
	err := c.cc.Invoke(ctx, "/ddev.sites.v1alpha1.Sites/BackupFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sitesClient) RestoreFiles(ctx context.Context, in *RestoreFilesRequest, opts ...grpc.CallOption) (*RestoreFilesResponse, error) {
	out := new(RestoreFilesResponse)
	err := c.cc.Invoke(ctx, "/ddev.sites.v1alpha1.Sites/RestoreFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sitesClient) PushFileBackup(ctx context.Context, in *PushFileBackupRequest, opts ...grpc.CallOption) (*PushFileBackupResponse, error) {
	out := new(PushFileBackupResponse)
	err := c.cc.Invoke(ctx, "/ddev.sites.v1alpha1.Sites/PushFileBackup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sitesClient) PushFileBackupStream(ctx context.Context, opts ...grpc.CallOption) (Sites_PushFileBackupStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Sites_serviceDesc.Streams[7], "/ddev.sites.v1alpha1.Sites/PushFileBackupStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &sitesPushFileBackupStreamClient{stream}
	return x, nil
}

type Sites_PushFileBackupStreamClient interface {
	Send(*PushFileBackupRequest) error
	CloseAndRecv() (*PushFileBackupResponse, error)
	grpc.ClientStream
}

type sitesPushFileBackupStreamClient struct {
	grpc.ClientStream
}

func (x *sitesPushFileBackupStreamClient) Send(m *PushFileBackupRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sitesPushFileBackupStreamClient) CloseAndRecv() (*PushFileBackupResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(PushFileBackupResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sitesClient) PullFileBackupStream(ctx context.Context, in *PullFileBackupRequest, opts ...grpc.CallOption) (Sites_PullFileBackupStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Sites_serviceDesc.Streams[8], "/ddev.sites.v1alpha1.Sites/PullFileBackupStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &sitesPullFileBackupStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Sites_PullFileBackupStreamClient interface {
	Recv() (*PullFileBackupResponse, error)
	grpc.ClientStream
}

type sitesPullFileBackupStreamClient struct {
	grpc.ClientStream
}

func (x *sitesPullFileBackupStreamClient) Recv() (*PullFileBackupResponse, error) {
	m := new(PullFileBackupResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sitesClient) DescribeFileBackup(ctx context.Context, in *DescribeFileBackupRequest, opts ...grpc.CallOption) (*DescribeFileBackupResponse, error) {
	out := new(DescribeFileBackupResponse)
	err := c.cc.Invoke(ctx, "/ddev.sites.v1alpha1.Sites/DescribeFileBackup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sitesClient) ListFileBackups(ctx context.Context, in *ListFileBackupsRequest, opts ...grpc.CallOption) (*ListFileBackupsResponse, error) {
	out := new(ListFileBackupsResponse)
	err := c.cc.Invoke(ctx, "/ddev.sites.v1alpha1.Sites/ListFileBackups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SitesServer is the server API for Sites service.
type SitesServer interface {
	CreateSite(context.Context, *CreateSiteRequest) (*CreateSiteResponse, error)
	GetSite(context.Context, *GetSiteRequest) (*GetSiteResponse, error)
	ListSites(context.Context, *ListSiteRequest) (*ListSiteResponse, error)
	UpdateSite(context.Context, *UpdateSiteRequest) (*UpdateSiteResponse, error)
	DeleteSite(context.Context, *DeleteSiteRequest) (*DeleteSiteResponse, error)
	SiteLogStream(*SiteLogsRequest, Sites_SiteLogStreamServer) error
	AccessLogStream(*AccessLogsRequest, Sites_AccessLogStreamServer) error
	MysqlLogStream(*MysqlLogsRequest, Sites_MysqlLogStreamServer) error
	BuildLogStream(*BuildLogsRequest, Sites_BuildLogStreamServer) error
	SiteExecStream(Sites_SiteExecStreamServer) error
	CloneSite(context.Context, *CloneRequest) (*CloneResponse, error)
	DescribeClone(context.Context, *DescribeCloneRequest) (*DescribeCloneResponse, error)
	ListCloneSiteOperations(context.Context, *ListCloneSiteOperationsRequest) (*ListCloneSiteOperationsResponse, error)
	ListClonesForSite(context.Context, *ListClonesForSiteRequest) (*ListClonesForSiteResponse, error)
	DeleteClone(context.Context, *DeleteCloneRequest) (*DeleteCloneResponse, error)
	BackupDatabase(context.Context, *BackupDatabaseRequest) (*BackupDatabaseResponse, error)
	RestoreDatabase(context.Context, *RestoreDatabaseRequest) (*RestoreDatabaseResponse, error)
	PushDatabaseBackup(context.Context, *PushDatabaseBackupRequest) (*PushDatabaseBackupResponse, error)
	PushDatabaseBackupStream(Sites_PushDatabaseBackupStreamServer) error
	PullDatabaseBackup(context.Context, *PullDatabaseBackupRequest) (*PullDatabaseBackupResponse, error)
	PullDatabaseBackupStream(*PullDatabaseBackupRequest, Sites_PullDatabaseBackupStreamServer) error
	ListDatabaseBackups(context.Context, *ListDatabaseBackupsRequest) (*ListDatabaseBackupsResponse, error)
	BackupFiles(context.Context, *BackupFilesRequest) (*BackupFilesResponse, error)
	RestoreFiles(context.Context, *RestoreFilesRequest) (*RestoreFilesResponse, error)
	PushFileBackup(context.Context, *PushFileBackupRequest) (*PushFileBackupResponse, error)
	PushFileBackupStream(Sites_PushFileBackupStreamServer) error
	PullFileBackupStream(*PullFileBackupRequest, Sites_PullFileBackupStreamServer) error
	DescribeFileBackup(context.Context, *DescribeFileBackupRequest) (*DescribeFileBackupResponse, error)
	ListFileBackups(context.Context, *ListFileBackupsRequest) (*ListFileBackupsResponse, error)
}

// UnimplementedSitesServer can be embedded to have forward compatible implementations.
type UnimplementedSitesServer struct {
}

func (*UnimplementedSitesServer) CreateSite(context.Context, *CreateSiteRequest) (*CreateSiteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSite not implemented")
}
func (*UnimplementedSitesServer) GetSite(context.Context, *GetSiteRequest) (*GetSiteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSite not implemented")
}
func (*UnimplementedSitesServer) ListSites(context.Context, *ListSiteRequest) (*ListSiteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSites not implemented")
}
func (*UnimplementedSitesServer) UpdateSite(context.Context, *UpdateSiteRequest) (*UpdateSiteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSite not implemented")
}
func (*UnimplementedSitesServer) DeleteSite(context.Context, *DeleteSiteRequest) (*DeleteSiteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSite not implemented")
}
func (*UnimplementedSitesServer) SiteLogStream(*SiteLogsRequest, Sites_SiteLogStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SiteLogStream not implemented")
}
func (*UnimplementedSitesServer) AccessLogStream(*AccessLogsRequest, Sites_AccessLogStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method AccessLogStream not implemented")
}
func (*UnimplementedSitesServer) MysqlLogStream(*MysqlLogsRequest, Sites_MysqlLogStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method MysqlLogStream not implemented")
}
func (*UnimplementedSitesServer) BuildLogStream(*BuildLogsRequest, Sites_BuildLogStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method BuildLogStream not implemented")
}
func (*UnimplementedSitesServer) SiteExecStream(Sites_SiteExecStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SiteExecStream not implemented")
}
func (*UnimplementedSitesServer) CloneSite(context.Context, *CloneRequest) (*CloneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloneSite not implemented")
}
func (*UnimplementedSitesServer) DescribeClone(context.Context, *DescribeCloneRequest) (*DescribeCloneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeClone not implemented")
}
func (*UnimplementedSitesServer) ListCloneSiteOperations(context.Context, *ListCloneSiteOperationsRequest) (*ListCloneSiteOperationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCloneSiteOperations not implemented")
}
func (*UnimplementedSitesServer) ListClonesForSite(context.Context, *ListClonesForSiteRequest) (*ListClonesForSiteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClonesForSite not implemented")
}
func (*UnimplementedSitesServer) DeleteClone(context.Context, *DeleteCloneRequest) (*DeleteCloneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteClone not implemented")
}
func (*UnimplementedSitesServer) BackupDatabase(context.Context, *BackupDatabaseRequest) (*BackupDatabaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BackupDatabase not implemented")
}
func (*UnimplementedSitesServer) RestoreDatabase(context.Context, *RestoreDatabaseRequest) (*RestoreDatabaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreDatabase not implemented")
}
func (*UnimplementedSitesServer) PushDatabaseBackup(context.Context, *PushDatabaseBackupRequest) (*PushDatabaseBackupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushDatabaseBackup not implemented")
}
func (*UnimplementedSitesServer) PushDatabaseBackupStream(Sites_PushDatabaseBackupStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method PushDatabaseBackupStream not implemented")
}
func (*UnimplementedSitesServer) PullDatabaseBackup(context.Context, *PullDatabaseBackupRequest) (*PullDatabaseBackupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PullDatabaseBackup not implemented")
}
func (*UnimplementedSitesServer) PullDatabaseBackupStream(*PullDatabaseBackupRequest, Sites_PullDatabaseBackupStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method PullDatabaseBackupStream not implemented")
}
func (*UnimplementedSitesServer) ListDatabaseBackups(context.Context, *ListDatabaseBackupsRequest) (*ListDatabaseBackupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDatabaseBackups not implemented")
}
func (*UnimplementedSitesServer) BackupFiles(context.Context, *BackupFilesRequest) (*BackupFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BackupFiles not implemented")
}
func (*UnimplementedSitesServer) RestoreFiles(context.Context, *RestoreFilesRequest) (*RestoreFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreFiles not implemented")
}
func (*UnimplementedSitesServer) PushFileBackup(context.Context, *PushFileBackupRequest) (*PushFileBackupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushFileBackup not implemented")
}
func (*UnimplementedSitesServer) PushFileBackupStream(Sites_PushFileBackupStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method PushFileBackupStream not implemented")
}
func (*UnimplementedSitesServer) PullFileBackupStream(*PullFileBackupRequest, Sites_PullFileBackupStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method PullFileBackupStream not implemented")
}
func (*UnimplementedSitesServer) DescribeFileBackup(context.Context, *DescribeFileBackupRequest) (*DescribeFileBackupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeFileBackup not implemented")
}
func (*UnimplementedSitesServer) ListFileBackups(context.Context, *ListFileBackupsRequest) (*ListFileBackupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFileBackups not implemented")
}

func RegisterSitesServer(s *grpc.Server, srv SitesServer) {
	s.RegisterService(&_Sites_serviceDesc, srv)
}

func _Sites_CreateSite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SitesServer).CreateSite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ddev.sites.v1alpha1.Sites/CreateSite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SitesServer).CreateSite(ctx, req.(*CreateSiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sites_GetSite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SitesServer).GetSite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ddev.sites.v1alpha1.Sites/GetSite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SitesServer).GetSite(ctx, req.(*GetSiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sites_ListSites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SitesServer).ListSites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ddev.sites.v1alpha1.Sites/ListSites",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SitesServer).ListSites(ctx, req.(*ListSiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sites_UpdateSite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SitesServer).UpdateSite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ddev.sites.v1alpha1.Sites/UpdateSite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SitesServer).UpdateSite(ctx, req.(*UpdateSiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sites_DeleteSite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SitesServer).DeleteSite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ddev.sites.v1alpha1.Sites/DeleteSite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SitesServer).DeleteSite(ctx, req.(*DeleteSiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sites_SiteLogStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SiteLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SitesServer).SiteLogStream(m, &sitesSiteLogStreamServer{stream})
}

type Sites_SiteLogStreamServer interface {
	Send(*SiteLogsResponse) error
	grpc.ServerStream
}

type sitesSiteLogStreamServer struct {
	grpc.ServerStream
}

func (x *sitesSiteLogStreamServer) Send(m *SiteLogsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Sites_AccessLogStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AccessLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SitesServer).AccessLogStream(m, &sitesAccessLogStreamServer{stream})
}

type Sites_AccessLogStreamServer interface {
	Send(*AccessLogsResponse) error
	grpc.ServerStream
}

type sitesAccessLogStreamServer struct {
	grpc.ServerStream
}

func (x *sitesAccessLogStreamServer) Send(m *AccessLogsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Sites_MysqlLogStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MysqlLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SitesServer).MysqlLogStream(m, &sitesMysqlLogStreamServer{stream})
}

type Sites_MysqlLogStreamServer interface {
	Send(*MysqlLogsResponse) error
	grpc.ServerStream
}

type sitesMysqlLogStreamServer struct {
	grpc.ServerStream
}

func (x *sitesMysqlLogStreamServer) Send(m *MysqlLogsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Sites_BuildLogStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BuildLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SitesServer).BuildLogStream(m, &sitesBuildLogStreamServer{stream})
}

type Sites_BuildLogStreamServer interface {
	Send(*BuildLogsResponse) error
	grpc.ServerStream
}

type sitesBuildLogStreamServer struct {
	grpc.ServerStream
}

func (x *sitesBuildLogStreamServer) Send(m *BuildLogsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Sites_SiteExecStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SitesServer).SiteExecStream(&sitesSiteExecStreamServer{stream})
}

type Sites_SiteExecStreamServer interface {
	Send(*SiteExecResponse) error
	Recv() (*SiteExecRequest, error)
	grpc.ServerStream
}

type sitesSiteExecStreamServer struct {
	grpc.ServerStream
}

func (x *sitesSiteExecStreamServer) Send(m *SiteExecResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sitesSiteExecStreamServer) Recv() (*SiteExecRequest, error) {
	m := new(SiteExecRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Sites_CloneSite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SitesServer).CloneSite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ddev.sites.v1alpha1.Sites/CloneSite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SitesServer).CloneSite(ctx, req.(*CloneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sites_DescribeClone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeCloneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SitesServer).DescribeClone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ddev.sites.v1alpha1.Sites/DescribeClone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SitesServer).DescribeClone(ctx, req.(*DescribeCloneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sites_ListCloneSiteOperations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCloneSiteOperationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SitesServer).ListCloneSiteOperations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ddev.sites.v1alpha1.Sites/ListCloneSiteOperations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SitesServer).ListCloneSiteOperations(ctx, req.(*ListCloneSiteOperationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sites_ListClonesForSite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClonesForSiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SitesServer).ListClonesForSite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ddev.sites.v1alpha1.Sites/ListClonesForSite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SitesServer).ListClonesForSite(ctx, req.(*ListClonesForSiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sites_DeleteClone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCloneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SitesServer).DeleteClone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ddev.sites.v1alpha1.Sites/DeleteClone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SitesServer).DeleteClone(ctx, req.(*DeleteCloneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sites_BackupDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackupDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SitesServer).BackupDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ddev.sites.v1alpha1.Sites/BackupDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SitesServer).BackupDatabase(ctx, req.(*BackupDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sites_RestoreDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestoreDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SitesServer).RestoreDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ddev.sites.v1alpha1.Sites/RestoreDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SitesServer).RestoreDatabase(ctx, req.(*RestoreDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sites_PushDatabaseBackup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushDatabaseBackupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SitesServer).PushDatabaseBackup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ddev.sites.v1alpha1.Sites/PushDatabaseBackup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SitesServer).PushDatabaseBackup(ctx, req.(*PushDatabaseBackupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sites_PushDatabaseBackupStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SitesServer).PushDatabaseBackupStream(&sitesPushDatabaseBackupStreamServer{stream})
}

type Sites_PushDatabaseBackupStreamServer interface {
	SendAndClose(*PushDatabaseBackupResponse) error
	Recv() (*PushDatabaseBackupRequest, error)
	grpc.ServerStream
}

type sitesPushDatabaseBackupStreamServer struct {
	grpc.ServerStream
}

func (x *sitesPushDatabaseBackupStreamServer) SendAndClose(m *PushDatabaseBackupResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sitesPushDatabaseBackupStreamServer) Recv() (*PushDatabaseBackupRequest, error) {
	m := new(PushDatabaseBackupRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Sites_PullDatabaseBackup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullDatabaseBackupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SitesServer).PullDatabaseBackup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ddev.sites.v1alpha1.Sites/PullDatabaseBackup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SitesServer).PullDatabaseBackup(ctx, req.(*PullDatabaseBackupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sites_PullDatabaseBackupStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullDatabaseBackupRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SitesServer).PullDatabaseBackupStream(m, &sitesPullDatabaseBackupStreamServer{stream})
}

type Sites_PullDatabaseBackupStreamServer interface {
	Send(*PullDatabaseBackupResponse) error
	grpc.ServerStream
}

type sitesPullDatabaseBackupStreamServer struct {
	grpc.ServerStream
}

func (x *sitesPullDatabaseBackupStreamServer) Send(m *PullDatabaseBackupResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Sites_ListDatabaseBackups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDatabaseBackupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SitesServer).ListDatabaseBackups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ddev.sites.v1alpha1.Sites/ListDatabaseBackups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SitesServer).ListDatabaseBackups(ctx, req.(*ListDatabaseBackupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sites_BackupFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackupFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SitesServer).BackupFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ddev.sites.v1alpha1.Sites/BackupFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SitesServer).BackupFiles(ctx, req.(*BackupFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sites_RestoreFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestoreFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SitesServer).RestoreFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ddev.sites.v1alpha1.Sites/RestoreFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SitesServer).RestoreFiles(ctx, req.(*RestoreFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sites_PushFileBackup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushFileBackupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SitesServer).PushFileBackup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ddev.sites.v1alpha1.Sites/PushFileBackup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SitesServer).PushFileBackup(ctx, req.(*PushFileBackupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sites_PushFileBackupStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SitesServer).PushFileBackupStream(&sitesPushFileBackupStreamServer{stream})
}

type Sites_PushFileBackupStreamServer interface {
	SendAndClose(*PushFileBackupResponse) error
	Recv() (*PushFileBackupRequest, error)
	grpc.ServerStream
}

type sitesPushFileBackupStreamServer struct {
	grpc.ServerStream
}

func (x *sitesPushFileBackupStreamServer) SendAndClose(m *PushFileBackupResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sitesPushFileBackupStreamServer) Recv() (*PushFileBackupRequest, error) {
	m := new(PushFileBackupRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Sites_PullFileBackupStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullFileBackupRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SitesServer).PullFileBackupStream(m, &sitesPullFileBackupStreamServer{stream})
}

type Sites_PullFileBackupStreamServer interface {
	Send(*PullFileBackupResponse) error
	grpc.ServerStream
}

type sitesPullFileBackupStreamServer struct {
	grpc.ServerStream
}

func (x *sitesPullFileBackupStreamServer) Send(m *PullFileBackupResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Sites_DescribeFileBackup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeFileBackupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SitesServer).DescribeFileBackup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ddev.sites.v1alpha1.Sites/DescribeFileBackup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SitesServer).DescribeFileBackup(ctx, req.(*DescribeFileBackupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sites_ListFileBackups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFileBackupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SitesServer).ListFileBackups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ddev.sites.v1alpha1.Sites/ListFileBackups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SitesServer).ListFileBackups(ctx, req.(*ListFileBackupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Sites_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ddev.sites.v1alpha1.Sites",
	HandlerType: (*SitesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSite",
			Handler:    _Sites_CreateSite_Handler,
		},
		{
			MethodName: "GetSite",
			Handler:    _Sites_GetSite_Handler,
		},
		{
			MethodName: "ListSites",
			Handler:    _Sites_ListSites_Handler,
		},
		{
			MethodName: "UpdateSite",
			Handler:    _Sites_UpdateSite_Handler,
		},
		{
			MethodName: "DeleteSite",
			Handler:    _Sites_DeleteSite_Handler,
		},
		{
			MethodName: "CloneSite",
			Handler:    _Sites_CloneSite_Handler,
		},
		{
			MethodName: "DescribeClone",
			Handler:    _Sites_DescribeClone_Handler,
		},
		{
			MethodName: "ListCloneSiteOperations",
			Handler:    _Sites_ListCloneSiteOperations_Handler,
		},
		{
			MethodName: "ListClonesForSite",
			Handler:    _Sites_ListClonesForSite_Handler,
		},
		{
			MethodName: "DeleteClone",
			Handler:    _Sites_DeleteClone_Handler,
		},
		{
			MethodName: "BackupDatabase",
			Handler:    _Sites_BackupDatabase_Handler,
		},
		{
			MethodName: "RestoreDatabase",
			Handler:    _Sites_RestoreDatabase_Handler,
		},
		{
			MethodName: "PushDatabaseBackup",
			Handler:    _Sites_PushDatabaseBackup_Handler,
		},
		{
			MethodName: "PullDatabaseBackup",
			Handler:    _Sites_PullDatabaseBackup_Handler,
		},
		{
			MethodName: "ListDatabaseBackups",
			Handler:    _Sites_ListDatabaseBackups_Handler,
		},
		{
			MethodName: "BackupFiles",
			Handler:    _Sites_BackupFiles_Handler,
		},
		{
			MethodName: "RestoreFiles",
			Handler:    _Sites_RestoreFiles_Handler,
		},
		{
			MethodName: "PushFileBackup",
			Handler:    _Sites_PushFileBackup_Handler,
		},
		{
			MethodName: "DescribeFileBackup",
			Handler:    _Sites_DescribeFileBackup_Handler,
		},
		{
			MethodName: "ListFileBackups",
			Handler:    _Sites_ListFileBackups_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SiteLogStream",
			Handler:       _Sites_SiteLogStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AccessLogStream",
			Handler:       _Sites_AccessLogStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "MysqlLogStream",
			Handler:       _Sites_MysqlLogStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BuildLogStream",
			Handler:       _Sites_BuildLogStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SiteExecStream",
			Handler:       _Sites_SiteExecStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "PushDatabaseBackupStream",
			Handler:       _Sites_PushDatabaseBackupStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "PullDatabaseBackupStream",
			Handler:       _Sites_PullDatabaseBackupStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PushFileBackupStream",
			Handler:       _Sites_PushFileBackupStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "PullFileBackupStream",
			Handler:       _Sites_PullFileBackupStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "live/sites/v1alpha1/service.proto",
}
